#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import subprocess
import sys
import json
import agent
import os

request = json.load(sys.stdin)
address = request['address']
port = int(request['port'])
replace = bool(request['replace'])
username, password = request['credentials']

errors = 0
podman_cmd = [
    'podman', 'run', '-i', '--workdir=/srv', '--rm', '--network=host', '--privileged',
    '--env=RSYNC_PASSWORD=' + password,
]

rsync_cmd = [
    'rsync',
    '-a',
    '--info=progress2',
    '--delete-after',

    # high-priority, harcoded filter rules: they cannot be overriden
    '--exclude=/state/agent.env',
    '--exclude=/state/environment',
]

if os.path.isfile('state-filter-rules.rsync'):
    rsync_cmd += ['--filter=. state-filter-rules.rsync']

rsync_cmd += [
    './', # source: workdir
    f'rsync://{username}@{address}:{port}/data/', # destination, remote rsync "data" module
]

core_env = agent.read_envfile('/etc/nethserver/core.env') # Import URLs of core images

transfer_cmd = [*podman_cmd, *agent.get_existing_volume_args(), core_env['RSYNC_IMAGE'], *rsync_cmd]
print(agent.SD_DEBUG + " ".join(transfer_cmd), file=sys.stderr)
with subprocess.Popen(transfer_cmd, stdin=subprocess.DEVNULL, stdout=subprocess.PIPE, text=True) as pclient:
    # Parse rsync --info output to set the task progress
    buf = ''
    cprogress = 0
    while True:
        ch = pclient.stdout.read(1)
        if not ch:
            break
        elif ch == '%':
            try:
                progress = int(float(buf[-3:]) * 0.99)
                if progress > cprogress:
                    agent.set_progress(progress)
                    cprogress = progress
            except:
                pass
            buf = ''
        elif ch == '\r' or ch == '\n':
            buf = ''
        else:
            buf += ch

if pclient.returncode != 0:
    print(agent.SD_ERR + "[ERROR] rsync transfer error " + str(pclient.returncode), file=sys.stderr)
    errors += 1 # non-fatal: cleanup required!

# Send a termination request to the server
pterminate = agent.run_helper(*podman_cmd, core_env['RSYNC_IMAGE'], *f'rsync -q rsync://{username}@{address}:{port}/terminate'.split())
if pterminate.returncode != 0:
    print(agent.SD_ERR + "[ERROR] cannot send termination message to the rsync server. Exit code " + str(pterminate.returncode), file=sys.stderr)
    errors += 1 # non-fatal: cleanup required!

if errors > 0:
    sys.exit(1)
