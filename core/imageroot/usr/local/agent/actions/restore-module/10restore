#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import agent
import json
import sys
import os

request = json.load(sys.stdin)

repository = request['repository']
repopath = request['path']
snapshot = request['snapshot'] or "latest"
original_environment = request['environment']

rdb = agent.redis_connect(host='127.0.0.1') # Connect to local replica

podman_args = ["--workdir=/srv"]
podman_args.extend(agent.get_state_volume_args()) # get volumes from state-include.conf

restic_args = ["restore", "--json", snapshot,
    "--target", ".", # workdir should be /srv
    "--exclude", "state/environment", # special core file exception
    "--exclude-xattr", "security.*", # ignore privileged xattr namespace
]

# Prepare progress callback function that captures non-progress messages too:
last_restic_message = {}
def build_restore_progress_callback():
    restore_progress = agent.get_progress_callback(1, 100)
    def fprog(omessage):
        global last_restic_message
        last_restic_message = omessage
        if omessage['message_type'] == 'status':
            fpercent = float(omessage['percent_done'])
            restore_progress(int(fpercent * 100))
    return fprog

prestore = agent.run_restic(rdb, repository, repopath, podman_args, restic_args, progress_callback=build_restore_progress_callback())
json.dump(last_restic_message, fp=open("restic_restore.json", "w"))
if prestore.returncode != 0:
    print(agent.SD_ERR + "Restic restore failed", last_restic_message, file=sys.stderr)
    sys.exit(1)
