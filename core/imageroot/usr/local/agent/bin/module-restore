#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import agent
import json
import sys
import os, os.path

request = json.load(sys.stdin)

repository = request['repository']
repopath = request['path']
snapshot = request['snapshot'] or "latest"
original_environment = request['environment']

rdb = agent.redis_connect(host='127.0.0.1') # Connect to local replica
podman_args = ["--workdir=/srv"]

def get_default_volume_mounts():
    volume_args = []
    install_dir = os.environ['AGENT_INSTALL_DIR']
    module_is_rootfull = os.geteuid() == 0
    module_id = os.environ['MODULE_ID']

    if os.path.isfile(install_dir + 'etc/state-include.conf'):
        # Mount Podman volumes by finding their names in the include file:
        with open(install_dir + 'etc/state-include.conf', 'r') as incfile:
            for iline in incfile:
                if iline.startswith('volumes/'):
                    sstart = len('volumes/')
                    send = iline.find('/', sstart)
                    svolume = iline[sstart:send]
                if svolume:
                    if module_is_rootfull:
                        dvolume = module_id + '-' + svolume
                    else:
                        dvolume = svolume

                    volume_args.append(f"--volume={dvolume}:/srv/{svolume}")
    else:
        # TODO: As alternative default strategy,
        #       we could mount already existing volumes
        pass

    return volume_args

if sys.argv[1:]:
    podman_args.extend(sys.argv[1:]) # forward command arguments to Podman
else:
    podman_args.extend(get_default_volume_mounts()) # mount volumes from state-include.conf

restic_args = ["restore", snapshot, "--target", "."] # workdir should be /srv
agent.run_restic(rdb, repository, repopath, podman_args, restic_args).check_returncode()
