#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import agent
import argparse
import hashlib
import requests

parser = argparse.ArgumentParser()
parser.add_argument('endpoint')
parser.add_argument('network', default="10.5.4.0/24")
parser.add_argument('admin_pw', default="Nethesis,1234")

args = parser.parse_args()

endpoint_host, endpoint_port = args.endpoint.split(":")

rdb = agent.redis_connect(privileged=True)

# Create the admin user and set a password
exit_code, output, error = agent.run_subtask(rdb,
    agent_prefix='cluster',
    action='add-user',
    input_obj= {
        "user": "admin",
        "password_hash": hashlib.sha256(args.admin_pw.encode()).hexdigest(),
        "grant": [{"role":"owner","on":"*"}],
    },
)
if exit_code != 0:
    print("The action add-user has failed:")
    sys.stdout.write(output)
    sys.stderr.write(error)
    exit(exit_code)

# Initialize a new cluster
exit_code, output, error = agent.run_subtask(rdb,
    agent_prefix='cluster',
    action='create-cluster',
    input_obj= {
        "network": args.network,
        "endpoint": args.endpoint,
        "listen_port": endpoint_port,
    },
)
if exit_code != 0:
    print("The action create-cluster has failed:")
    sys.stdout.write(output)
    sys.stderr.write(error)
    exit(exit_code)

loginobj = {
    "username": "admin",
    "password": args.admin_pw,
}

response = requests.post('http://127.0.0.1:8080/api/login', json=loginobj)
response.raise_for_status()
payload = response.json()

print("Copy the following command to a worker node to join this cluster with admin's credentials:\n")
print(f"    join-cluster --no-tlsverify https://{endpoint_host} {payload['token']}")
