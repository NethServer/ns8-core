#!/usr/local/agent/pyenv/bin/python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import os
import sys
import argparse
import agent
import pwd

argp = argparse.ArgumentParser(description="Run a command in the agent environment of MODULE_ID")
argp.add_argument("-m", "--module-id", help="MODULE_ID, a module identifier (e.g. \"module1\", \"node\"). Default is \"cluster\". Only root can use this flag")
argp.add_argument("-c", "--current-dir", action="store_true", help="Run in current directory, instead of changing directory to the state directory, defined in the AGENT_STATE_DIR environment variable")
argp.add_argument('ARGS', metavar="COMMAND", nargs=(argparse.REMAINDER if sys.stdout.isatty() else '+'), help="The list of command to execute and arguments for it. Optional only if running within a terminal. In that case \"bash -l\" is assumed")
args = argp.parse_args()

def read_env(file_path):
    env = agent.read_envfile(file_path)
    os.environ.update(env)

#
# Establish the default module id value. Can be overridden by -m
#
if os.geteuid() == 0:
    if args.module_id:
        mid = args.module_id
    else:
        mid = 'cluster'
elif args.module_id:
    # -m is not allowed for non-root users
    argp.print_help()
    sys.exit(1)

if os.geteuid() != 0:
    # rootless module
    home_dir = os.path.expanduser("~")
    read_env("/etc/nethserver/agent.env")
    read_env(f"{home_dir}/.config/state/agent.env")
    read_env(f"{home_dir}/.config/state/environment")
    os.environ['AGENT_INSTALL_DIR'] = f"{home_dir}/.config"
    os.environ['AGENT_STATE_DIR'] = f"{home_dir}/.config/state"
elif os.path.isdir(f"/var/lib/nethserver/{mid}"):
    # rootfull module
    read_env("/etc/nethserver/agent.env")
    read_env(f"/var/lib/nethserver/{mid}/state/agent.env")
    read_env(f"/var/lib/nethserver/{mid}/state/environment")
    os.environ['AGENT_INSTALL_DIR'] = f"/var/lib/nethserver/{mid}"
    os.environ['AGENT_STATE_DIR'] = f"/var/lib/nethserver/{mid}/state"
else:
    # if module id is a local Unix user, change process UID and GID
    # and exec() again
    try:
        module_uid = pwd.getpwnam(mid)[2]
    except:
        print(f"[FATAL] Cannot find module {mid} in the local node", file=sys.stderr)
        sys.exit(1)

    # Prepare to run rootless: drop -m arguments
    rargv = list(sys.argv)
    for targ in ["-m", "--module-id"]:
        try:
            idx = rargv.index(targ)
        except ValueError:
            continue
        rargv.pop(idx) # drop -m
        rargv.pop(idx) # drop the value

    xdg_runtime_dir=f"/run/user/{module_uid}"
    if os.path.isdir(xdg_runtime_dir):
        os.execvp("/usr/sbin/runuser", ["runuser", "-s", "/usr/bin/env", "-l", mid, "--", f"XDG_RUNTIME_DIR={xdg_runtime_dir}"] + rargv)
    else:
        print(f"[FATAL] Cannot find runtime directory for {mid}", file=sys.stderr)
        sys.exit(1)

if not args.current_dir:
    os.chdir(os.environ['AGENT_STATE_DIR'])

os.environ['AGENT_ID'] = os.environ['REDIS_USER']

if len(args.ARGS) == 0:
    print("runagent: starting bash -l", file=sys.stderr)
    print("runagent: working directory:", os.getcwd(), file=sys.stderr)
    # If not ARGS are given, fall back to Bash login shell
    args.ARGS.extend(['bash', '-l'])

os.execvp(args.ARGS[0], args.ARGS)
