#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import os
import sys
import json
import agent
import subprocess
import semver

try:
    # Parse the running container image labels (old Redis version)
    with subprocess.Popen(['podman', 'inspect', 'redis'], stdout=subprocess.PIPE, stderr=sys.stderr) as proc:
        inspect = json.load(proc.stdout)
        redis_url = inspect[0]['Config']['Image']
    aver = semver.parse_version_info(redis_url.split(':')[-1])
    # Read the new Redis version
    core_env = agent.read_envfile('/etc/nethserver/core.env')
    bver = semver.parse_version_info(core_env['REDIS_IMAGE'].split(':')[-1])
except ValueError:
    print(agent.SD_WARNING + 'Cannot parse semantic version information from redis image tags. Assuming a "minor" update type is occurring', file=sys.stderr)
    aver = semver.parse_version_info('0.0.0')
    bver = semver.parse_version_info('0.1.0')

if aver >= bver:
    print('The new redis image does not update the current one. Nothing to do.', file=sys.stderr)
    sys.exit(0)

if bver.major > aver.major:
    update_type = "major"
elif bver.minor > aver.minor:
    update_type = "minor"
else:
    update_type = "patch"

if update_type in ['major', 'minor']:
    agent.run_helper('systemctl', 'restart', 'redis')
