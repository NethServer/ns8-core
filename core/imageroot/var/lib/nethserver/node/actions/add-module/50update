#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import os
import sys
import json
import agent
import uuid
import hashlib
import subprocess
import re

def save_agent_env(module_id):
    """Generate and persist the Redis password for module_id
    """
    oldmask = os.umask(0o77)
    redis_password = str(uuid.uuid4())
    with open('state/agent.env', 'w') as agentenv:
        agentenv.write(f'REDIS_USER=module/{module_id}\n')
        agentenv.write(f'REDIS_PASSWORD={redis_password}\n')
    os.umask(oldmask)
    return hashlib.sha256(redis_password.encode()).hexdigest()

def allocate_tcp_ports_range(module_id, size):
    """Allocate a TCP port range of the given size for module_id
    """
    global rdb
    assert size > 0

    seq = rdb.incrby(f'{agent_prefix}/tcp_ports_sequence', size)
    assert int(seq) > 0
    rdb.hset(f'module/{module_id}/environment', 'TCP_PORT', f'{seq - 1}') # Always set the first port
    if size > 1: # Multiple ports: always set the ports range variable
        rdb.hset(f'module/{module_id}/environment', 'TCP_PORTS_RANGE', f'{seq - size}-{seq - 1}')
    if size <= 8: # Few ports: set also a comma-separated list of ports variable
        rdb.hset(f'module/{module_id}/environment', 'TCP_PORTS', ','.join(str(port) for port in range(seq-size, seq)))

request = json.load(sys.stdin)
image_id = request['image']
module_id = request['module']
agent_prefix = os.environ['AGENT_ID']
rdb = agent.redis_connect(privileged=True)


# Read from DB the rootfull flag state:
with agent.redis_connect() as ro:
    image_url = ro.hget(f'image/{image_id}', 'url')
    assert image_url

# Pull the image from the remote server, if not already available locally
agent.run_helper('podman-pull-missing', image_url).check_returncode()

# Parse the image labels
with subprocess.Popen(['podman', 'image', 'inspect', image_url], stdout=subprocess.PIPE, stderr=sys.stderr) as proc:
    inspect = json.load(proc.stdout)
    labels = inspect[0]['Labels']
    image_id = inspect[0]['Id']
    image_digest = inspect[0]['Digest']
    image_repodigest = inspect[0]['RepoDigests'][0]

if 'org.nethserver/rootfull' in labels:
    is_rootfull = int(labels['org.nethserver/rootfull']) == 1
else:
    is_rootfull = False

if 'org.nethserver/tcp_ports_demand' in labels:
    tcp_ports_demand = int(labels['org.nethserver/tcp_ports_demand'])
else:
    tcp_ports_demand = 0

# XXX Allocate TCP ports, if required
if tcp_ports_demand > 0:
    allocate_tcp_ports_range(module_id, tcp_ports_demand)

# XXX Store the image metadata for agent self-inspection purposes
rdb.hset(f'module/{module_id}/environment', mapping={
    'IMAGE_ID': image_id,
    'IMAGE_URL': image_url,
    'IMAGE_DIGEST': image_digest,
    'IMAGE_REOPODIGEST': image_repodigest,
})

# Launch the module agent (async)
if is_rootfull:
    # Create the module dirs structure
    os.mkdir(f'/var/lib/nethserver/{module_id}/')
    os.mkdir(f'/var/lib/nethserver/{module_id}/state', mode=0o700)
    # Extract the module imageroot
    os.chdir(f'/var/lib/nethserver/{module_id}')
    redis_sha256 = save_agent_env(module_id)
    agent.run_helper('extract-image', image_url).check_returncode()
    # Start the module agent
    agent.run_helper('systemctl', 'enable', '--now', f'agent@{module_id}.service').check_returncode()
else: # rootless
    # Create the module dirs structure
    agent.run_helper('useradd', '-m', '-k', '/etc/nethserver/skel', '-s', '/bin/bash', module_id).check_returncode()
    os.chdir(f'/home/{module_id}/.config')
    redis_sha256 = save_agent_env(module_id)
    # Extract the module imageroot and fix CWD permissions recursively
    agent.run_helper('extract-image', image_url).check_returncode()
    # Start the module agent
    agent.run_helper('loginctl', 'enable-linger', module_id).check_returncode()

json.dump({
    "redis_sha256":redis_sha256,
    "rootfull": is_rootfull,
}, sys.stdout)
