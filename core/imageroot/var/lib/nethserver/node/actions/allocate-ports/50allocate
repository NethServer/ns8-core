#!/usr/bin/env python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import node.ports_manager
import agent
import json
import sys
import os

request = json.load(sys.stdin)

module_env = os.getenv("AGENT_TASK_USER")

if module_env != "" and module_env != f"module/{request['module_id']}":
    print(agent.SD_ERR + f" Agent {module_env} does not have permission to change the port allocation for {request['module_id']}.", file=sys.stderr)
    sys.exit(1)
    
# Ensure number of ports required
rdb = agent.redis_connect(privileged=False)
if request['protocol'] == 'tcp':
    ports_demand = rdb.hgetall('cluster/tcp_ports_demand')
elif request['protocol'] == 'udp':
    ports_demand = rdb.hgetall('cluster/udp_ports_demand')

total_ports_required = request['ports']
ports_used = node.ports_manager.get_ports_by_module(request['module_id'])

if ports_demand:
    for port in ports_used:
        if port[2] == request['module_id']:
            total_ports_required += (port[1] - port[0] + 1)

    if total_ports_required > int(ports_demand.get(request['module_id'])):
        print(agent.SD_ERR + " Error: Exceeded the allowed number of ports.", file=sys.stderr)
        sys.exit(1)

range = node.ports_manager.allocate_ports(int(request['ports']), request['module_id'], request['protocol'], request['keep_existing'])

json.dump(range, fp=sys.stdout)
