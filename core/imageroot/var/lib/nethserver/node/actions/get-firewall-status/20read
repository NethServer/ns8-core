#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import os
import sys
import json
import subprocess
import re

status = {}

# make sure the command it's executed with English locale
env = os.environ.copy()
env['LANG'] = 'C'

# services and ports

public_zone_lines = subprocess.run(["firewall-cmd", "--list-all", "--zone=public"],
                                   env=env, capture_output=True, text=True, check=True)

for public_zone_line in public_zone_lines.stdout.split("\n"):
    if re.match('^\s+services:', public_zone_line):
        service_names = public_zone_line.split(":")[1].strip().split(" ")

        # retrieve ports for every service
        services = []

        for service_name in service_names:
            service = {'name': service_name}
            info_lines = subprocess.run(["firewall-cmd", "--info-service", service_name],
                                        env=env, capture_output=True, text=True, check=True)

            for info_line in info_lines.stdout.split("\n"):
                if re.match('^  ports:', info_line):
                    ports = info_line.split(":")[1].strip().split(" ")
                    service['ports'] = ports

            services.append(service)

        status['services'] = services
    elif re.match('^\s+ports:', public_zone_line):
        # ports with no service associated
        ports = public_zone_line.split(":")[1].strip().split(" ")

        if ports[0] == '':
            status['ports'] = []
        else:
            status['ports'] = ports


# interfaces

with subprocess.Popen(['ip', '-j', 'addr'], stdout=subprocess.PIPE, stderr=sys.stderr) as proc:
    ip_cmd_output = json.load(proc.stdout)

ipaddr = []
interfaces = []
for iface in ip_cmd_output:
    interfaces.append(iface['ifname'])
    if "UP" not in iface.get("flags", []):
        continue
    addresses = []
    for addr in iface.get("addr_info", []):
        if addr["family"] in ("inet", "inet6"):
            if addr["scope"] in ("global"):
                addresses.append({
                    "family": addr["family"],
                    "address": addr["local"],
                    "prefixlen": addr["prefixlen"]
                })
    if addresses:
        ipaddr.append({
            "ifname": iface["ifname"],
            "addresses": addresses
        })
status['interfaces'] = interfaces
status['ipaddr'] = ipaddr

json.dump(status, fp=sys.stdout)
