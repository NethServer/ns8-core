#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import json
import agent
import subprocess

request = json.load(sys.stdin)
name = request['service']
new_ports = set(request['ports'])

fw_cmd = ['firewall-cmd', '--permanent']

try:
    # Retrieve the current service ports
    current_ports = set(subprocess.check_output(
        fw_cmd + [f'--service={name}', '--get-ports'],
        stderr=subprocess.DEVNULL,
        text=True,
    ).split())
except subprocess.CalledProcessError as ex:
    if ex.returncode == 101: # INVALID_SERVICE
        print(agent.SD_INFO + f'Firewall public service "{name}" does not exist and will be created.', file=sys.stderr)
        current_ports = set()
        # Create the service
        agent.run_helper(*fw_cmd, f'--new-service={name}').check_returncode()
        # Add the service to default zone
        agent.run_helper(*fw_cmd, f'--add-service={name}').check_returncode()
    else:
        raise ex

# Add service ports
port_add_cmd = [f'--service={name}']
for port in new_ports.difference(current_ports):
    port_add_cmd.append(f'--add-port={port}')
if len(port_add_cmd) > 1:
    agent.run_helper(*fw_cmd, *port_add_cmd).check_returncode()

# If asked, remove any current port not in the request
port_remove_cmd = [f'--service={name}']
if request.get('replace_ports'):
    for port in current_ports.difference(new_ports):
        port_remove_cmd.append(f'--remove-port={port}')
    if len(port_remove_cmd) > 1:
        agent.run_helper(*fw_cmd, *port_remove_cmd).check_returncode()

if len(port_add_cmd) > 1 or len(port_remove_cmd) > 1:
    # Apply the configuration
    agent.run_helper('firewall-cmd', '--reload').check_returncode()
else:
    print(agent.SD_INFO + f'Firewall public service "{name}" unchanged.', file=sys.stderr)
