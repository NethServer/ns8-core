#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import agent
import os
import sys
import socket
import subprocess
import json

self_id = int(os.environ['NODE_ID'])

with agent.redis_connect(privileged=False) as rdb:

    leader_id = int(rdb.hget('cluster/environment', 'NODE_ID'))
    peers = {}
    for pkey in rdb.scan_iter('node/*/vpn'):
        node_id = int(pkey.removeprefix('node/').removesuffix('/vpn'))
        peers[node_id] = rdb.hgetall(pkey)
        # Convert "destinations" from a space separated string to a Python set
        peers[node_id]['destinations'] = {peers[node_id]['ip_address'] + '/32', *peers[node_id].get('destinations', '').split()}
        # Set default hub_id value
        if 'hub_id' in peers[node_id]:
            peers[node_id]['hub_id'] = int(peers[node_id]['hub_id']) # convert to integer
        else:
            peers[node_id]['hub_id'] = node_id if peers[node_id]['endpoint'] else leader_id


agent.assert_exp(len(peers) >= 0)
agent.assert_exp(leader_id > 0)

#
# Build the VPN configuration by grouping peers behind their hub nodes
#
ip_address = peers[self_id]['ip_address']
listen_port = int(peers[self_id]['listen_port'])
wgconf={}
for node_id in peers:

    hub_id = peers[node_id]['hub_id']
    if not hub_id in peers:
        print(agent.SD_WARNING + f"Invalid reference in node/{node_id}/vpn.hub_id = {hub_id}", file=sys.stderr)
        hub_id = leader_id

    if node_id == self_id:
        # Nothing to do with the running node
        continue
    elif node_id == hub_id:
        # The node is an hub, ensure it is pushed to the wgconf
        wgconf.setdefault(hub_id, peers[hub_id])
    elif self_id == hub_id:
        # The running node is an hub for the node
        wgconf.setdefault(node_id, peers[node_id])
    else:
        # The node is an edge, behind some hub node

        # 1. ensure the hub is pushed to the wgconf
        wgconf.setdefault(hub_id, peers[hub_id])

        # 2. push the node destinations behind the hub
        wgconf[hub_id]['destinations'] |= peers[node_id]['destinations']

agent.save_wgconf(ip_address, listen_port=listen_port, peers=wgconf)

def get_wgset_endpoint_clause(endpoint):
    if not endpoint:
        return []

    address, port = endpoint.split(':')

    try:
        addrinfo = socket.getaddrinfo(address, port)
        # Get the IP address (the last 0) of the first entry (first 0) from
        # sockaddr item (index 4)
        return ['endpoint', ':'.join([addrinfo[0][4][0], port])]
    except:
        return []

errors = 0
valid_destinations = []
for node_id in wgconf:
    # Apply immediately the new configuration to the WireGuard wg0 interface...
    wset_proc = agent.run_helper('wg', 'set', 'wg0', 'peer', wgconf[node_id]["public_key"], 'persistent-keepalive', '25', 'allowed-ips',
        ",".join(wgconf[node_id]["destinations"]),
        *get_wgset_endpoint_clause(wgconf[node_id]['endpoint']),
        log_command=True,
    )
    if wset_proc.returncode != 0:
        errors +=1
        print(agent.SD_ERR + f'Runtime change of allowed-ips has failed for peer node/{node_id}', file=sys.stderr)

    for xdest in wgconf[node_id]['destinations']:
        # ...and to the system routing table
        ipreplace_proc = agent.run_helper('ip', 'route', 'replace', xdest, 'nexthop', 'dev', 'wg0', log_command=True)
        if ipreplace_proc.returncode != 0:
            errors += 1
            print(agent.SD_ERR + f"Runtime change of routing table has failed for destination {xdest}", file=sys.stderr)

        valid_destinations.append(xdest.removesuffix('/32'))

#
# Purge the route table from stale entries
#
iproute_proc = subprocess.run(['ip', '-j', 'route', 'list', 'dev', 'wg0'], stdout=subprocess.PIPE)
if iproute_proc.returncode == 0:
    routes = json.loads(iproute_proc.stdout)
    for route_object in routes:
        ydest = route_object['dst']
        if not ydest in valid_destinations:
            ipdelete_proc = agent.run_helper('ip', 'route', 'delete', ydest, log_command=True)
            if ipdelete_proc.returncode != 0:
                print(agent.SD_ERR + f"Error while removing the stale destination {ydest}", file=sys.stderr)
                errors += 1
else:
    print(agent.SD_ERR + f"Error while reading wg0 routes", file=sys.stderr)
    errors += 1


agent.assert_exp(errors == 0)

print("true") # Honor output JSON schema
