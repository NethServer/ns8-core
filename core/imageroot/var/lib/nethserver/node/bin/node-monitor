#!/usr/bin/env python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import asyncio
import aiohttp
import multiprocessing
import sys
import os
import agent

# Alarm states
UNKNOWN = 'U'
CLEAR = '0'
CRITICAL = 'F'

nmenv = agent.read_envfile("node-monitor.env")

# Prepare runtime parameters
node_name = 'node_' + os.environ['NODE_ID']
auth_token = nmenv.get("NMON_ALERT_AUTH_TOKEN")
alert_provider = nmenv.get("NMON_ALERT_PROVIDER")
system_id = nmenv.get("NMON_ALERT_SYSTEM_ID")
dartagnan_url = nmenv.get("NMON_DARTAGNAN_URL")
cpu_count = multiprocessing.cpu_count()

def parse_meminfo():
    meminfo = {}
    with open("/proc/meminfo", encoding='utf-8', newline="\n") as fmem:
        for line in fmem:
            key, value, unit, _ = (line.rstrip("\n") + ' 0 0 0').split(maxsplit=3)
            meminfo[key.rstrip(":")] = value
    return meminfo

async def send_alert(url, value, alert, retry=3):
    if value == CLEAR:
        astatus = 'OK'
    elif value == CRITICAL:
        astatus = 'FAILURE'
    else:
        return
    ctimeout = aiohttp.ClientTimeout(total=60.0, connect=50, sock_connect=40, sock_read=10)
    ex_message = None
    try:
        async with aiohttp.ClientSession(timeout=ctimeout, headers={'Authorization': 'token ' + auth_token}) as cs:
            await cs.post(url, json={"lk":system_id, "alert_id": alert, "status": astatus})
    except Exception as ex:
        ex_message = str(ex)
    if ex_message:
        if retry > 0:
            print(agent.SD_DEBUG + "send_alert temporary failure:", value, alert, ex_message, f"-- retrying in 20 seconds", file=sys.stderr)
            await asyncio.sleep(20)
            await send_alert(url, value, alert, retry - 1)
        else:
            print(agent.SD_ERR + "send_alert aborted:", value, alert, ex_message, file=sys.stderr)

async def raise_alert(value, alert):
    if value == CLEAR:
        svalue = 'CLEAR'
    elif value == CRITICAL:
        svalue = 'CRITICAL'
    else:
        svalue = 'UNKNOWN'
    if alert.startswith('load'):
        print('NOTICE', svalue, alert, file=sys.stderr)
        return # do not send load alarm at all, just log it
    else:
        print('ALERT', svalue, alert, file=sys.stderr)
    if alert_provider == 'nsent':
        await send_alert('https://my.nethesis.it/isa/alerts/store', value, alert)
    elif alert_provider == 'nscom':
        await send_alert(f'{dartagnan_url}/machine/alerts/store', value, alert)

async def check_swap_presence():
    meminfo = parse_meminfo()
    if int(meminfo['SwapTotal']) == 0:
        return (CRITICAL, 'swap:notpresent:' + node_name)
    else:
        return (CLEAR, 'swap:notpresent:' + node_name)

async def check_swap():
    meminfo = parse_meminfo()
    if int(meminfo['SwapTotal']) == 0:
        return (CLEAR, 'swap:full:' + node_name)
    try:
        swapfree_ratio = float(meminfo['SwapFree']) / int(meminfo['SwapTotal'])
    except:
        swapfree_ratio = 0.0
    if swapfree_ratio < 0.2:
        state = CRITICAL
    else:
        state = CLEAR
    return (state, 'swap:full:' + node_name)


async def check_mountpoints(mp_path, mp_name=None):
    ostatvfs = os.statvfs(mp_path)
    if not mp_name:
        mp_name = mp_path.strip("/").replace("/", "_")
    free_inodes_ratio = float(ostatvfs.f_ffree) / ostatvfs.f_files
    free_blocks_ratio = float(ostatvfs.f_bfree) / ostatvfs.f_blocks
    if free_inodes_ratio < 0.02 or free_blocks_ratio < 0.1:
        state = CRITICAL
    else:
        state = CLEAR
    return (state, f'fs:{mp_name}:full:' + node_name)

async def check_systemload():
    with open("/proc/loadavg", encoding='utf-8', newline="\n") as fload:
        fields = fload.readline().split()
    # consider critical 1 minute load average greater than CPU count
    if float(fields[0]) > cpu_count:
        state = CRITICAL
    else:
        state = CLEAR
    return (state, 'load:high:' + node_name)

async def check_backup():
    state = UNKNOWN
    try:
        with open("/run/backup-monitor.dat", "rb") as fbackup:
            fstate = fbackup.read(1)
        if fstate == b'0':
            state = CLEAR
        elif fstate == b'F':
            state = CRITICAL
    except FileNotFoundError:
        pass
    return (state, 'system:backup:failure')

async def monitor_loop(check_function, fargs=[], fkwargs={}, period=2, hysteresis=4):
    # hysteresis counts how many past checks are considered to build the
    # alarm state
    state_buffer = [CLEAR,] * hysteresis
    alarm_state = UNKNOWN # force initial transition to CLEAR
    head = 0

    def current_state():
        return state_buffer[head]

    # the alarm state changes when all past checks are equal and different
    # from the last alarm state
    def check_alarm():
        return alarm_state != current_state() and all(x == current_state() for x in state_buffer)

    while True:
        (value, alert) = await check_function(*fargs, **fkwargs)
        state_buffer[head] = value # update current state
        if check_alarm():
            alarm_state = value
            await raise_alert(value, alert)
        await asyncio.sleep(period)
        head = (head + 1) % hysteresis

async def main():
    # Run each check inside a monitor loop in parallel:
    await asyncio.gather(
        monitor_loop(check_swap, period=3, hysteresis=10), # 30 seconds
        monitor_loop(check_swap_presence, period=60, hysteresis=30), # 30 minutes
        monitor_loop(check_systemload, period=5, hysteresis=24), # 2 minutes
        monitor_loop(check_mountpoints, fargs=['/', 'root'], period=15, hysteresis=4), # 1 minute
        monitor_loop(check_mountpoints, fargs=['/boot', 'boot'], period=15, hysteresis=4), # 1 minute
        monitor_loop(check_backup, period=10, hysteresis=1),
    )

asyncio.run(main())
