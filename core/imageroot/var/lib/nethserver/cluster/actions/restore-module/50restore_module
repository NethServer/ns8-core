#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import agent
import sys
import os
import agent.tasks
import json
import tempfile

request = json.load(sys.stdin)

# source
repository = request['repository']
path = request['path']
snapshot = request['snapshot'] or "latest"
replace_requested = request.get('replace', False)

# destination
node_id = int(request['node'])

rdb = agent.redis_connect()

# Write the output to a named temporary file, 
# to parse it with the existing read_envfile() function
with tempfile.NamedTemporaryFile() as fenv:
    agent.run_restic(rdb, repository, path, ["--workdir=/srv"], ["dump", snapshot, "state/environment"], text=True, encoding='utf-8', stdout=fenv, check=True)
    fenv.seek(0)
    original_environment = agent.read_envfile(fenv.name)

remove_tasks = []
image_url = original_environment['IMAGE_URL']
image_name = agent.get_image_name_from_url(image_url)
if image_name == 'traefik':
    # Use existing instance for restoration. Restore the backup with a
    # merge-like strategy, implemented by the module as wanted.
    module_id = agent.resolve_agent_id("traefik@node", node_id=str(node_id)).removeprefix("module/")
    add_module_result = {
        "output": {
            "module_id": module_id,
            "image_name": image_name,
            "image_url": image_url,
        },
        "error": "",
        "exit_code": 0,
    }
else:
    add_module_result = agent.tasks.run("cluster", "add-module",
        data={
            "image": image_url,
            "node": node_id,
        },
        endpoint="redis://cluster-leader",
        progress_callback=agent.get_progress_callback(2, 15)
    )
    agent.assert_exp(add_module_result['exit_code'] == 0)
    module_id = add_module_result['output']['module_id']
    # Search for existing instance with the same MODULE_UUID to remove:
    for kmod in rdb.hkeys("cluster/module_node"):
        if rdb.hget(f'module/{kmod}/environment', 'MODULE_UUID') == original_environment['MODULE_UUID']:
            # Prepare a task that removes the old module:
            remove_tasks.append({
                "agent_id": "cluster",
                "action": "remove-module",
                "data": {
                    "module_id": kmod,
                    "preserve_data": False
                },
            })

restore_task_result = agent.tasks.run("module/" + module_id, "restore-module",
    data={
        "repository": repository,
        "path": path,
        "snapshot": snapshot,
        "environment": original_environment,
        # MODULE_UUID is always preserved if there is no module to be replaced
        "replace": replace_requested or len(remove_tasks) == 0
    },
    endpoint="redis://cluster-leader",
    progress_callback=agent.get_progress_callback(16, 99 if len(remove_tasks) == 0 else 94),
)

agent.assert_exp(restore_task_result['exit_code'] == 0)

if len(remove_tasks) > 0 and replace_requested:
    # Remove existing modules with the same MODULE_UUID:
    remove_modules_errors = agent.tasks.runp_brief(
        remove_tasks,
        endpoint="redis://cluster-leader",
        progress_callback=agent.get_progress_callback(95, 99)
    )
    agent.assert_exp(remove_modules_errors == 0)

json.dump(add_module_result['output'], fp=sys.stdout)
