#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import agent
import cluster.grants
import json

request = json.load(sys.stdin)
rdb = agent.redis_connect(privileged=True)

user = request['user']
password_hash = request['password_hash']

if rdb.execute_command('ACL', 'GETUSER', user) != None:
    agent.set_status('validation-failed')
    json.dump({'field':'user','parameter':'user','value':user,'error':'user_already_exists'}, fp=sys.stdout) # XXX: implement library function
    sys.exit(2)

agent.assert_exp(rdb.hset(f'user/{user}', mapping={
    'display_name': request['set'].get('display_name', user),
    'email': request['set'].get('email', ''),
}) >= 0)

rdb.execute_command('ACL', 'DELUSER', user) # Drop the user to avoid double-password accounts
agent.assert_exp(rdb.execute_command('ACL', 'SETUSER', user, 'ON', '#'+password_hash, 'resetkeys', 'resetchannels', 'nocommands') == 'OK')
agent.assert_exp(rdb.execute_command('ACL', 'SAVE') == 'OK')

for roledef in request['grant']:
    cluster.grants.alter_user(rdb, user, False, roledef['role'], roledef['on'])

print("true")
