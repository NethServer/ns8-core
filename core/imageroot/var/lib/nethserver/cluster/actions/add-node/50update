#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import os
import sys
import json
import agent
import ipcalc
import uuid

# Action summary:
# 1. allocate a VPN IP address for the node
# 2. create redis acls for the node agent

request = json.load(sys.stdin)

node_pwh = request['node_pwh']
assert node_pwh and len(node_pwh) == 64
public_key = request['public_key']
assert public_key
endpoint = request['endpoint']
assert type(endpoint) is str
listen_port = request['listen_port']
assert listen_port > 0

rdb = agent.redis_connect(privileged=True)

#
# 1/a. Retrieve the leader VPN attributes,
#      required by the caller to complete the join-cluster action
#
leader_id = rdb.get('cluster/leader')
leader_ip_address = rdb.hget(f'node/{leader_id}/vpn', 'ip_address')
assert leader_ip_address
leader_public_key = rdb.hget(f'node/{leader_id}/vpn', 'public_key')
assert leader_public_key
leader_listen_port = rdb.hget(f'node/{leader_id}/vpn', 'listen_port')
assert leader_listen_port
leader_endpoint = rdb.hget(f'node/{leader_id}/vpn', 'endpoint')
assert leader_endpoint

#
# 1/b. Generate a new node_id and VPN IP address
#
network = ipcalc.Network(rdb.get('cluster/network'))
node_id = int(rdb.incr(f'cluster/node_sequence'))
ip_address = str(network.network() + node_id)

#
# 1/c. Store VPN settings of the new node
#
assert rdb.hset(f'node/{node_id}/vpn', mapping={
    "public_key": public_key,
    "ip_address": ip_address,
    "endpoint": endpoint,
    "listen_port": str(listen_port),
}) >= 0

# Initialize the node ports sequence
assert rdb.set(f'node/{node_id}/tcp_ports_sequence', 20000) == 'OK'

#
# 2. Create redis acls for the node agent
#
assert rdb.execute_command('ACL', 'SETUSER',
    f'node/{node_id}', 'ON', '#' + node_pwh,
    'resetkeys', f'~node/{node_id}/*',
    'resetchannels', '&progress/task/*',
    'nocommands', '+@read', '+@write', '+@transaction', '+@connection', '+publish',
) == 'OK'

#
# Add the WireGuard peer configuration
#
peers = {pkey: rdb.hgetall(pkey) for pkey in rdb.scan_iter('node/*/vpn')}
agent.save_wgconf(leader_ip_address, leader_listen_port, peers)
agent.run_helper(*f'wg set wg0 peer {public_key} persistent-keepalive 25 allowed-ips {ip_address}'.split(' ')).check_returncode()
agent.run_helper(*f'ip route del {ip_address}'.split(' ')) # Ignore error
agent.run_helper(*f'ip route add {ip_address} dev wg0'.split(' ')).check_returncode()

# Install core modules in the new node
for core_module_image in ['traefik', 'ldapproxy']:
    rdb.lpush('cluster/tasks', json.dumps({
        "id": str(uuid.uuid4()),
        "action": "add-module",
        "data": json.dumps({
            "image": core_module_image,
            "node": node_id,
        }),
    }))

#
# Return the new information to the caller
#
json.dump({
    "node_id": node_id, # required to set up node agent
    "ip_address": ip_address, # required to set up wg0 device
    "leader_public_key": leader_public_key, # required for VPN auth
    "network": str(network), # required to set up route table
    "leader_ip_address": leader_ip_address, # required to rewrite /etc/hosts cluster-leader
    "leader_endpoint": leader_endpoint, # required to reach the WireGuard listen_port
}, sys.stdout)
