#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import agent
import agent.tasks
import os
import sys
import json

request = json.load(sys.stdin)

rdb = agent.redis_connect(privileged=True)

destinations = {}

for reqitem in request.get('add', []):
    network = reqitem['network']
    node_id = reqitem['node_id']

    if not node_id in destinations:
        destinations[node_id] = {*rdb.hget(f'node/{node_id}/vpn', 'destinations').split()}

    # merge the new destination with existing values
    destinations[node_id] |= {network}

for reqitem in request.get('remove', []):
    network = reqitem['network']
    node_id = reqitem['node_id']

    if not node_id in destinations:
        destinations[node_id] = {*rdb.hget(f'node/{node_id}/vpn', 'destinations').split()}

    # remove the destination from existing values
    destinations[node_id] -= {network}

pipe = rdb.pipeline()

with rdb.pipeline() as pipe:
    for node_id in destinations:
        pipe.hset(f'node/{node_id}/vpn', 'destinations', ' '.join(sorted(destinations[node_id])))

    pipe.execute()

# Build the task requests, one for each node
tasks = []

for knode in rdb.scan_iter('node/*/vpn'):
    if len(destinations) == 1 and knode in [f'node/{node_id}/vpn' for node_id in destinations]:
        # if the update is limited to just one node, it can be skipped
        continue

    tasks.append({
        'agent_id': knode.removesuffix('/vpn'),
        'action': 'update-routes',
        'data': {},
    })

# Parallel tasks run
errors = agent.tasks.runp_brief(
    tasks,
    endpoint="redis://cluster-leader",
)

agent.assert_exp(errors == 0)

print("true") # Honor output JSON schema
