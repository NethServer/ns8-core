#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import agent.tasks
import requests
from aiohttp import ClientConnectorCertificateError, ClientResponseError
from urllib.parse import urlparse

request = json.load(sys.stdin)
endpoint_url = request['url'].rstrip('/') + '/cluster-admin'
rdb = agent.redis_connect()
network = rdb.get('cluster/network')

if network:
    agent.set_status('validation-failed')
    json.dump([{'field':'url', 'parameter':'url','value': endpoint_url, 'error':'cluster_network_already_set'}], fp=sys.stdout)
    sys.exit(2)

leader_hostname = urlparse(endpoint_url).hostname
if leader_hostname == agent.get_hostname():
    agent.set_status('validation-failed')
    print(agent.SD_ERR, f"FQDN {leader_hostname} is used by the leader node. Set a different FQDN for this node.", file=sys.stderr)
    json.dump([{'field':'url', 'parameter':'url','value': leader_hostname, 'error':'cluster_hostname_error'}], fp=sys.stdout)
    sys.exit(2)

try:
    requests.head(endpoint_url, verify=request['tls_verify'], timeout=8.0)
    validate_auth = agent.tasks.run(
        agent_id='cluster',
        action='list-actions',
        extra={
            "title": f"New node authentication probe",
            "description": "",
            "isNotificationHidden": True,
        },
        parent='', # Our AGENT_TASK_ID is useless in another cluster: force parent to empty string
        endpoint=endpoint_url,
        tls_verify=request['tls_verify'],
        auth_token=request['jwt'],
        retry_attempts=1,
    )
except (requests.exceptions.SSLError, ClientConnectorCertificateError) as ex:
    agent.set_status('validation-failed')
    print(agent.SD_ERR, ex, file=sys.stderr)
    json.dump([{'field':'tls_verify', 'parameter':'tls_verify','value': request['tls_verify'], 'error':'cluster_tls_verify_error'}], fp=sys.stdout)
    sys.exit(3)
except ClientResponseError as ex:
    agent.set_status('validation-failed')
    print(agent.SD_ERR, ex, file=sys.stderr)
    json.dump([{'field':'jwt', 'parameter':'jwt','value': '***', 'error':'cluster_auth_error'}], fp=sys.stdout)
    sys.exit(4)
except requests.ConnectionError as ex:
    agent.set_status('validation-failed')
    print(agent.SD_ERR, ex, file=sys.stderr)
    json.dump([{'field':'url', 'parameter':'url','value': endpoint_url, 'error':'cluster_connection_error'}], fp=sys.stdout)
    sys.exit(5)
