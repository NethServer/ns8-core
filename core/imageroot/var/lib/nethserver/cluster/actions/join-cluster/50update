#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import agent
import hashlib
import requests
import json
import sys
import time
import os
from envparse import env

# Action summary:
# 1. Send the join request to the remote cluster leader
# 2. Receive our node_id and VPN IP address
# 2. Configure the node AGENT_ID/REDIS_USER with new node_id and restart it
# 3. Configure WireGuard device and routing table
# 4. Bind Redis to the VPN IP address
# 5. Switch Redis to replica

request = json.load(sys.stdin)

jwt = request['jwt']
agent.assert_exp(jwt)
url = request['url']
agent.assert_exp(url)
listen_port = int(request['listen_port'])
agent.assert_exp(listen_port > 0)
tls_verify = bool(request['tls_verify'])
agent.assert_exp(tls_verify is not None)

# Read our VPN public key
public_key = agent.slurp_file('/etc/nethserver/wg0.pub')
agent.assert_exp(public_key)

# Start the Redis client before changing sensible environment variables
rdb = agent.redis_connect(privileged=True)

# Import node agent configuration:
if 'AGENT_ID' in os.environ:
    del(os.environ['AGENT_ID'])
if 'REDIS_PASSWORD' in os.environ:
    del(os.environ['REDIS_PASSWORD'])
env.read_envfile('/var/lib/nethserver/node/state/agent.env')
node_pw = env('REDIS_PASSWORD')
agent.assert_exp(len(node_pw) > 0)
node_pwh = hashlib.sha256(node_pw.encode()).hexdigest()

#
# Invoke the cluster add-node action remotely:
#
response = requests.post(url.strip('/') + '/cluster-admin/api/cluster/tasks', timeout=30, json={
        "id": "",
        "action": "add-node",
        "data": {
            "node_pwh": node_pwh,
            "public_key": public_key,
            "endpoint": "",
            "listen_port": listen_port,
        },
    },
    verify=tls_verify,
    headers={'Authorization': 'Bearer ' + jwt})
response.raise_for_status()
body = response.json()

agent.assert_exp(body['Code'] == 201)

task_id = body['Data']['ID']

#
# XXX Poll the remote server until the task has completed
#
pollurl = url.strip('/') + f'/cluster-admin/api/cluster/task/{task_id}/status'
print(f"Reading response from {pollurl}", file=sys.stderr)
for attempt in range(0,5):
    time.sleep(2)
    response = requests.get(pollurl, timeout=30, verify=tls_verify, headers={'Authorization': 'Bearer ' + jwt})
    try:
        response.raise_for_status()
        body = response.json()
    except Exception as e:
        print(f"Request attempt {attempt} failed: {str(e)}")
        continue
    if body['Code'] == 200:
        break
    else:
        print(agent.SD_ERR + "Unexpected response payload", file=sys.stderr)
        print(body, file=sys.stderr)
else:
    print(agent.SD_ERR + 'Join response reading attempts exhausted. Action aborted!', file=sys.stderr)
    sys.exit(1)

payload = body['Data']['output']

agent.assert_exp(payload['ip_address'])
agent.assert_exp(payload['node_id'])
agent.assert_exp(payload['leader_ip_address'])
agent.assert_exp(payload['leader_public_key'])
agent.assert_exp(payload['leader_endpoint'])

ip_address = payload['ip_address']
node_id = payload['node_id']
leader_ip_address = payload['leader_ip_address']
leader_public_key = payload['leader_public_key']
leader_endpoint = payload['leader_endpoint']

# Reconfigure node agent
agent.run_helper('sed', '-i', f'/^AGENT_ID=/c\AGENT_ID=node/{node_id}', '/var/lib/nethserver/node/state/agent.env').check_returncode()

# VPN bootstrap
agent.save_wgconf(ip_address, listen_port, {
    "leader-node":{"ip_address": leader_ip_address, "public_key": leader_public_key, 'endpoint': leader_endpoint }
})
agent.run_helper(*'systemctl restart wg-quick@wg0'.split(' ')).check_returncode()

# Restart the node agent to apply the new VPN setup
agent.run_helper(*'systemctl restart agent@node'.split(' ')).check_returncode()

# Fix cluster-leader and cluster-localnode addresses in /etc/hosts
# !!! Warning !!! Full restart may be required by agents and podman containers to pick up this:
agent.run_helper('sed', '-i',
    '-e', f'/cluster-leader$/c\{leader_ip_address} cluster-leader',
    '-e', f'/cluster-localnode$/c\{ip_address} cluster-localnode',
    '/etc/hosts').check_returncode()

# Bind Redis to the VPN ip_address
agent.assert_exp(rdb.execute_command('CONFIG SET', 'bind', f'127.0.0.1 ::1 {ip_address}') is True)

# Set this Redis instance read-only
agent.assert_exp(rdb.execute_command('REPLICAOF', leader_ip_address, '6379') == 'OK')

# Write configuration to disk. The node_pw is stored in clear-text, 
# but the default volume directory permissions allows root-only access to it:
agent.assert_exp(rdb.execute_command('CONFIG REWRITE') == 'OK')

# Redis DB becomes read-only: agents are now locked out!

# Send some JSON data to complete the action
json.dump({}, fp=sys.stdout)
