#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import json
import agent
import agent.tasks
import sys, os
import subprocess
import cluster.grants

request = json.load(sys.stdin)
image_url= request['module_url']
instances = request['instances']
image_id = ''
force = "force" in request and request["force"] is True

rdb = agent.redis_connect(privileged=True)

# Modules sanity check: send a "list-actions" ping task and wait the result.
# If any module fails abort the whole action.
ping_errors = agent.tasks.runp_brief([{"agent_id": f"module/{mid}", "action": "list-actions"} for mid in instances],
    endpoint="redis://cluster-leader",
    progress_callback=agent.get_progress_callback(1, 30),
)
agent.assert_exp(ping_errors == 0)

if not force:
    # Pull the image from the remote server, if not already available locally
    agent.run_helper('podman-pull-missing', image_url,
        progress_callback=agent.get_progress_callback(0,30)
    ).check_returncode()
else:
    agent.run_helper('podman', 'pull', image_url,
        progress_callback=agent.get_progress_callback(0,30)
    ).check_returncode()

# Retrieve the image org.nethserver.authorizations label
with subprocess.Popen(['podman', 'image', 'inspect', image_url], stdout=subprocess.PIPE, stderr=sys.stderr) as proc:
    inspect = json.load(proc.stdout)
    inspect_labels = inspect[0]['Labels']
    try:
        authorizations = inspect_labels['org.nethserver.authorizations'].split()
    except:
        authorizations = []
        
if 'org.nethserver.tcp-ports-demand' in inspect_labels:
    tcp_ports_demand = int(inspect_labels['org.nethserver.tcp-ports-demand'])
else:
    tcp_ports_demand = 0

if 'org.nethserver.udp-ports-demand' in inspect_labels:
    udp_ports_demand = int(inspect_labels['org.nethserver.udp-ports-demand'])
else:
    udp_ports_demand = 0

# Run sanity checks on the org.nethserver.authorizations label:
if not cluster.grants.check_authorizations_sanity(authorizations):
    print(agent.SD_ERR + f'Invalid org.nethserver.authorizations label value image_url={image_url}:', authorizations, file=sys.stderr)
    sys.exit(2)

# Start the module update on each instance
update_tasks = []
for module_id in instances:
    
    if tcp_ports_demand > 0:
        rdb.hset('cluster/tcp_ports_demand', mapping={module_id: tcp_ports_demand})
    else:
        rdb.hdel('cluster/tcp_ports_demand', module_id)

    if udp_ports_demand > 0:
        rdb.hset('cluster/udp_ports_demand', mapping={module_id: udp_ports_demand})
    else:
        rdb.hdel('cluster/udp_ports_demand', module_id)

    if authorizations:
        # Replace existing authorizations with the new image:
        rdb.delete(f'cluster/authorizations/module/{module_id}')
        rdb.sadd(f'cluster/authorizations/module/{module_id}', 'self:selfadm', *authorizations)

        node_id = int(rdb.hget(f'cluster/module_node', module_id))
        # Update module permissions before running update-module on it
        cluster.grants.add_module_permissions(rdb, module_id, authorizations, node_id)

    update_tasks.append({
        "agent_id": f"module/{module_id}",
        "action": "update-module",
        "data": {
            "module_url": image_url,
            "force" : force
        }
    })

update_retvals = agent.tasks.runp(update_tasks,
    endpoint = "redis://cluster-leader",
    progress_callback = agent.get_progress_callback(31, 95),
)

errors = 0
appspath = '/var/lib/nethserver/cluster/ui/apps/'
for idx, retval in enumerate(update_retvals):
    mid = instances[idx]

    if isinstance(retval, Exception):
        print(agent.SD_ERR + f"Module instance \"{mid}\" task exception: {retval}", file=sys.stderr)
        errors += 1
        continue

    if retval['exit_code'] != 0:
        print(agent.SD_ERR + f"Module instance \"{mid}\" update failed with code {retval['exit_code']}", file=sys.stderr)
        errors += 1
        continue

    # The update was successful. Now extract and install the new UI image in the leader node.
    try:
        # Temporary directory random-enough suffix:
        dsfx = "." + os.getenv('AGENT_TASK_ID', str(os.getpid()))[:8]
        # Extract the UI code into a temporary directory
        os.mkdir(appspath + mid + dsfx)
        os.chdir(appspath + mid + dsfx)
        agent.run_helper('extract-ui', image_url).check_returncode()
        # Replace the app UI directory. Cannot find a way to do this
        # atomically and faster.
        os.rename(appspath + mid, appspath + mid + dsfx + '~')
        os.rename(appspath + mid + dsfx, appspath + mid)
        agent.run_helper('rm', '-rf', appspath + mid + dsfx + '~')
        # Remove the previous image, we do not need anymore
        previous_image_id = rdb.hget(f'module/{mid}/environment', 'PREV_IMAGE_URL')
        if previous_image_id:
            agent.run_helper("podman", "rmi", "--ignore", previous_image_id)
    except Exception as ex:
        print(agent.SD_ERR + f"Module UI update failed for instance {mid}: {ex}", file=sys.stderr)
        errors += 1
        continue

agent.assert_exp(errors == 0)

json.dump({}, fp=sys.stdout)
