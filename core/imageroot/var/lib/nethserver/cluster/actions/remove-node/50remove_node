#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import sys
import json
import agent
import agent.tasks

request = json.load(sys.stdin)
tnode_id = str(request['node_id'])

rdb = agent.redis_connect(privileged=True)

# Start the remove-node action on the target node, but do not wait its
# completion:
agent.tasks.run_nowait(
    agent_id='node/' + tnode_id,
    action='remove-node',
    endpoint="redis://cluster-leader",
)

agent.set_progress(10)

# Delete the target node keyspace
node_keys = set(knode for knode in rdb.scan_iter(f'node/{tnode_id}/*'))
node_keys.discard(f'node/{tnode_id}/tasks') # ensure we do not delete the task
rdb.delete(*node_keys)

agent.assert_exp(rdb.execute_command('ACL', 'DELUSER', 'node/' + tnode_id) == 1)
agent.assert_exp(rdb.execute_command('ACL', 'SAVE') == 'OK')
agent.save_acls(rdb)

agent.set_progress(19)

# Prepare a list of tasks to update VPN routes on remaining nodes
update_routes_tasks = [{
    'agent_id': knode.removesuffix('/vpn'),
    'action': 'update-routes',
    'data': {},
} for knode in rdb.scan_iter('node/*/vpn')] # It's ok, the removed node record is no more present.

agent.tasks.run(
    agent_id='cluster',
    action='update-routes',
    endpoint="redis://cluster-leader",
    progress_callback=agent.get_progress_callback(20,98),
)

rdb.delete(f'node/{tnode_id}/tasks') # ensure the task key is finally removed
