#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import json
import agent
import agent.tasks

request = json.load(sys.stdin)
module_id = request['module_id']
agent.assert_exp(module_id)
preserve_data = request['preserve_data']
agent.assert_exp(preserve_data is not None)

#
# 1. invoke the "destroy-module" action on the target module, if available
# 2. invoke "remove-module" on every node
# 3. wipe the module key space
# 4. delete the Redis user
#

rdb = agent.redis_connect(privileged=True)

if rdb.exists(f'module/{module_id}') != 1:
    json.dump({"field": "module_id", "parameter": "module_id", "value": module_id, "error": "module_not_found"}, fp=sys.stdout) # XXX: implement library function
    agent.set_status('validation-failed')
    sys.exit(2)

node_id = int(rdb.hget(f'module/{module_id}/environment', 'NODE_ID'))


# Invoke the module destructor, if defined. Rootfull modules must
# implement one, to stop running services.
destroy_module_result = agent.tasks.run(
    agent_id=f'module/{module_id}',
    action='destroy-module',
    data={
        "module_id": module_id,
        "preserve_data": preserve_data,
    },
    endpoint="redis://cluster-leader",
)
agent.assert_exp(destroy_module_result['exit_code'] == 0)

remove_module_result = agent.tasks.run(
    agent_id=f'node/{node_id}',
    action='remove-module',
    data={
        "module_id": module_id,
        "preserve_data": preserve_data,
    },
    endpoint="redis://cluster-leader",
)
agent.assert_exp(remove_module_result['exit_code'] == 0) # The node remove-module action must succeed

# If module_id is registered as default_instance, forget it:
for kdef in rdb.scan_iter('*/default_instance/*'):
    if rdb.get(kdef) == module_id:
        rdb.delete(kdef)

# Erase the module keyspace
module_keys = list(rdb.scan_iter(f'module/{module_id}*'))
if module_keys:
    rdb.delete(*module_keys)

# Delete the Redis account
agent.assert_exp(rdb.execute_command('ACL', 'DELUSER', f'module/{module_id}') == 1)

# Persist ACLs to disk
agent.assert_exp(rdb.execute_command('ACL', 'SAVE') == 'OK')

json.dump({}, fp=sys.stdout)
