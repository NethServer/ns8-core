#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import re
import sys
import json
import agent
import subprocess
import os
import time
from datetime import datetime, timezone

request = json.load(sys.stdin)
popen_args={"encoding": 'utf-8', "stdout": subprocess.PIPE, "stderr": sys.stderr, "text": True}
rdb = agent.redis_connect(privileged=False)
cluster_uuid = rdb.get("cluster/uuid") or ""
repositories = {}
backups = {}
for krepo in rdb.scan_iter('cluster/backup_repository/*'):
    repo_uuid = krepo.removeprefix('cluster/backup_repository/')
    rclone_lsjson_cmd = ['rclone-wrapper', repo_uuid,
        '--max-depth=3',
        '--include=config',
        'lsjson',
        '--files-only',
        'REMOTE_PATH',
    ]
    orepo = rdb.hgetall(krepo)
    repositories[repo_uuid] = orepo
    proot = subprocess.Popen(rclone_lsjson_cmd, **popen_args)
    for oroot in json.load(proot.stdout):
        restic_prefix, restic_uuid, _ = oroot["Path"].split("/", 2)
        try:
            # Obtain from lsjson the repository creation timestamp
            unix_timestamp = int(time.mktime(datetime.fromisoformat(oroot["ModTime"]).timetuple()))
        except:
            unix_timestamp = int(time.time())
        backups.setdefault(restic_uuid, {})
        backups[restic_uuid][repo_uuid] = {
            "module_id": "",
            "module_ui_name": "",
            "node_fqdn": "",
            "path": restic_prefix + '/' + restic_uuid,
            "name": restic_prefix, # keep "name" attribute for historical reason
            "uuid": restic_uuid,
            "timestamp": unix_timestamp,
            "repository_id" : repo_uuid,
            "repository_name": orepo["name"],
            "repository_provider": orepo["provider"],
            "repository_url": orepo["url"],
            "installed_instance": "",
            "installed_instance_ui_name": "",
            "is_generated_locally": None,
        }

# Fetch module UUIDs to search destination matches:
for module_id in rdb.hkeys("cluster/module_node"):
    omodule = rdb.hgetall(f"module/{module_id}/environment")
    module_uuid = omodule.get("MODULE_UUID", "")
    if module_uuid not in backups:
        continue
    for repo_uuid in backups[module_uuid]:
        backups[module_uuid][repo_uuid]["is_generated_locally"] = True
        backups[module_uuid][repo_uuid]["installed_instance"] = module_id
        backups[module_uuid][repo_uuid]["installed_instance_ui_name"] = rdb.get(f"module/{module_id}/ui_name") or ""
        backups[module_uuid][repo_uuid]["module_id"] = module_id
        backups[module_uuid][repo_uuid]["module_ui_name"] = backups[module_uuid][repo_uuid]["installed_instance_ui_name"]

for repo_uuid in repositories:
    rclone_cat_cmd = ['rclone-wrapper', repo_uuid,
        '--include=*.json',
        '--max-depth=2',
        'cat',
        'REMOTE_PATH',
    ]
    proc_cat = subprocess.Popen(rclone_cat_cmd, **popen_args)
    for cat_slice in proc_cat.stdout.readlines():
        try:
            ometa = json.loads(cat_slice.strip())
        except:
            ometa = {}

        if ometa.get('uuid') in backups:
            module_uuid = ometa["uuid"]
            backups[module_uuid][repo_uuid]["module_id"] = ometa.get("module_id", "")
            backups[module_uuid][repo_uuid]["module_ui_name"] = ometa.get("module_ui_name", "")
            backups[module_uuid][repo_uuid]["node_fqdn"] = ometa.get("node_fqdn", "")
            backups[module_uuid][repo_uuid]["timestamp"] = ometa.get("timestamp", unix_timestamp)
        if "cluster_uuid" in ometa and not backups[module_uuid][repo_uuid].get("is_generated_locally"):
            backups[module_uuid][repo_uuid]["is_generated_locally"] = cluster_uuid == ometa["cluster_uuid"]

json.dump([restic_repo for xrepo in backups.values() for restic_repo in xrepo.values()], fp=sys.stdout)
