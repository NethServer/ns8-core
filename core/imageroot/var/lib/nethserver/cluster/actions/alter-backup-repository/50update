#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import os
import sys
import json
import agent
import cluster.backup
import subprocess

request = json.load(sys.stdin)
rdb = agent.redis_connect(privileged=True)

rprovider = request['provider']
rid = request['id']
rparameters = request.get('parameters', {})

url = rdb.hget(f'cluster/backup_repository/{rid}', 'url')
if not url:
    agent.set_status('validation-failed')
    json.dump([{'field':'id','parameter':'id','value': rid,'error':'backup_repository_not_found'}], fp=sys.stdout)
    sys.exit(2)

if rprovider != rdb.hget(f'cluster/backup_repository/{rid}', 'provider'):
    agent.set_status('validation-failed')
    json.dump([{'field':'provider','parameter':'provider','value': rprovider,'error':'backup_provider_mismatch'}], fp=sys.stdout)
    sys.exit(3)

# validate repository credentials
renv = dict(os.environ) # copy the environment
renv.update(request['parameters']) # merge parameters
renv['url'] = url # add url
pvalidate = subprocess.run(['rclone-wrapper', '0', 'size', '--json', 'REMOTE_PATH'], text=True, capture_output=True, env=renv)
if pvalidate.returncode != 0:
    agent.set_status('validation-failed')
    if 'failed to authorize' in pvalidate.stderr:
        json.dump([{'field':'parameters','parameter':'parameters','value':'','error':'backup_repository_auth_error'}], fp=sys.stdout)
    else:
        json.dump([{'field':'url','parameter':'url','value':request['url'], 'error':'backup_repository_not_accessible'}], fp=sys.stdout)
    sys.exit(4)

if 'name' in request:
    rname = request['name']
else:
    rname = rdb.hget(f'cluster/backup_repository/{rid}', 'name') or ""

if not rname:
    rname = cluster.backup.get_default_backup_repository_name(rprovider, url, rid)

data = dict(rparameters, name=rname) # add the name field to rparameters

rdb.hset(f'cluster/backup_repository/{rid}', mapping=data)
