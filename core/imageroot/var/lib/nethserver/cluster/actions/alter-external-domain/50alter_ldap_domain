#!/usr/bin/env python3

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import sys
import json
import agent
import cluster.userdomains
import os

#
# Sample request:
# {
# "domain":"example.com",
# "protocol": "ldap",
# "host":"18.19.20.21",
# "port": 636,
# "schema": "rfc2307",
# "bind_dn": "cn=ldapservice,dc=example,dc=com",
# "bind_password": "s3cret",
# "base_dn": "dc=example,dc=com",
# "tls": true,
# "tls_verify": true
# }
request = json.load(sys.stdin)
domain = request['domain']
protocol = request['protocol']

rdb = agent.redis_connect(privileged=True)

if protocol == 'ldap':
    trx = rdb.pipeline()
    trx.hset(f"cluster/user_domain/ldap/{domain}/conf", mapping={
        'schema': request.get('schema') or cluster.userdomains.probe_ldap_schema(request),
        'bind_dn': request['bind_dn'],
        'bind_password': request['bind_password'],
        'base_dn': request['base_dn'] or cluster.userdomains.probe_ldap_basedn(request),
        'tls': 'on' if request['tls'] else 'off',
        'tls_verify': 'on' if request['tls_verify'] else 'off',
    })

    #
    # Advertise new account provider setup
    #
    trx.publish(os.getenv('AGENT_ID') + '/event/ldap-provider-changed', json.dumps({
        'domain': domain,
        'key': f"cluster/user_domain/ldap/{domain}/providers",
    }))
    trx.execute()
