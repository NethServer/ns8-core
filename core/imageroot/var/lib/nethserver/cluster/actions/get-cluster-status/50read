#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import json
import agent
import redis
import socket
import hashlib
import subprocess
import agent.tasks
import os
import time

rdb = agent.redis_connect(privileged=True)
client_list_cache = rdb.client_list("normal") # cache init

MAX_IDLE_TIME = 8 # Two times the agent poll period (4 secs)

def _get_int_def(value, default):
    try:
        return int(value)
    except:
        return default

def node_is_online(node_id, attempt=1):
    global client_list_cache
    if attempt > 1:
        print(agent.SD_WARNING + "node is online ?", node_id, attempt, file=sys.stderr)

    for client_item in client_list_cache:
        if client_item['name'] == f"node/{node_id}" and client_item['cmd'] == 'brpop':
            if int(client_item['idle']) < MAX_IDLE_TIME:
                return True
            else:
                return False

    if attempt > 3:
        # Node agent is expected to issue a BRPOP immediately. If two
        # retries has failed the node is really down
        return False
    else:
        # A blocked "brpop" command was not found. Wait a while, refresh
        # the cache and recursively run the check again.
        time.sleep(1)
        client_list_cache = rdb.client_list("normal")
        return node_is_online(node_id, attempt + 1)

cluster_ui_name = rdb.get(f"cluster/ui_name") or ""
leader_id = int(rdb.hget("cluster/environment", "NODE_ID"))
leader_endpoint = rdb.hget(f"node/{leader_id}/vpn", "endpoint") or "leader.invalid:55820"
local_id = int(os.environ['NODE_ID'])
local_public_key = rdb.hget(f"node/{local_id}/vpn", "public_key")

ret = { 'initialized': False, 'leader': False, 'nodes': [], 'leader_url': '', 'default_password': False, 'ui_name': cluster_ui_name, }
vpn = {}

default_password = hashlib.sha256(b'Nethesis,1234').hexdigest()
admin = rdb.acl_getuser('admin')
for p in admin['passwords']:
    if p == default_password:
        ret['default_password'] = True

network = rdb.get('cluster/network')
if network is not None:
    ret["initialized"] = True
    # The leader must have a public endpoint:
    leader_hostname, _ = leader_endpoint.rsplit(":", 1)
    ret['leader_url'] = f'https://{leader_hostname}/cluster-admin/'
    ret['leader'] = local_id == leader_id
    for node in rdb.scan_iter('node/*/vpn'):
        node_id = node.split('/')[1]
        ovpn = rdb.hgetall(node)
        kvpn = ovpn['public_key']
        if rdb.sismember(f'node/{node_id}/flags', 'nomodules'):
            continue
        node_ui_name = rdb.get(f"node/{node_id}/ui_name") or ""
        node_vpn_endpoint = rdb.hget(f"node/{node_id}/vpn", "endpoint") or ""
        vpn[kvpn] = {'id': int(node_id), 'ui_name': node_ui_name,'local': False,
        'online': node_is_online(node_id),
        'hostname': f"node{node_id}.invalid", # XXX Deprecated field: do not use it any more
        'vpn': {
            'ip_address': ovpn['ip_address'],
            'public_key': ovpn['public_key'],
            'endpoint': node_vpn_endpoint,
        }}

else:
    json.dump(ret, fp=sys.stdout)
    sys.exit(0)

i = 0
proc = subprocess.Popen(['/usr/bin/wg', 'show', 'wg0', 'dump'],stdout=subprocess.PIPE,text=True)
for line in proc.stdout.readlines():
    parts = line.rstrip().split("\t")
    if i == 0:
        vpn[local_public_key]['vpn']['public_key'] = parts[1]
        vpn[local_public_key]['vpn']['endpoint'] = leader_endpoint
        vpn[local_public_key]['vpn']['listen_port'] = _get_int_def(parts[2], 55820)
        vpn[local_public_key]['local'] = True
    else:
        kvpn = parts[0]
        if not kvpn in vpn:
            continue # ignore unknown VPN peers
        elif parts[2] != '(none)':
            vpn[kvpn]['vpn']['endpoint'] = parts[2]
        vpn[kvpn]['vpn']['last_seen'] = _get_int_def(parts[4], 0)
        vpn[kvpn]['vpn']['rcvd'] = _get_int_def(parts[5], 0)
        vpn[kvpn]['vpn']['sent'] = _get_int_def(parts[6], 0)
        vpn[kvpn]['vpn']['keepalive'] = _get_int_def(parts[7], 0)

    i = i+1

for i in vpn.values():
    ret['nodes'].append(i)

json.dump(ret, fp=sys.stdout)
