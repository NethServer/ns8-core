#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import json
import agent
import redis
import socket
import hashlib
import subprocess

def get_ip(host):
    ip_list = socket.gethostbyaddr(host)[2]
    return ip_list[0]

request = json.load(sys.stdin)
rdb = agent.redis_connect(privileged=True)

ret = { 'initialized': False, 'leader': False, 'nodes': [], 'leader_url': None, 'default_password': False }
vpn = {}

network = rdb.get('cluster/network')
if network is not None:
    ret["initialized"] = True
    for node in rdb.scan_iter('node/*/vpn'):
        node_id = node.split('/')[1]
        ip_addr = rdb.hget(node, 'ip_address')
        vpn[ip_addr] = {'id': int(node_id), 'vpn': { 'ip_address': ip_addr, 'listen_port': int(rdb.hget(node, 'listen_port')) } }
        # the leader is the peer with the endpoint
        endpoint = rdb.hget(node, 'endpoint')
        if endpoint:
            ret['leader_url'] = f'https://{endpoint.partition(":")[0]}/cluster-admin/'
else:
    json.dump(ret, fp=sys.stdout)
    sys.exit(0)


if get_ip('cluster-leader') == '127.0.0.1':
    ret["leader"] = True

i = 0
proc = subprocess.Popen(['/usr/bin/wg', 'show', 'wg0', 'dump'],stdout=subprocess.PIPE)
for line in proc.stdout.readlines():
    parts = line.decode().rstrip().split("\t")
    if i == 0:
        local_ip = get_ip('cluster-localnode')
        vpn[local_ip]['vpn']['public_key'] = parts[1]
        vpn[local_ip]['local'] = True
    else:
        peer_ip = parts[3].removesuffix('/32')
        vpn[peer_ip]['vpn']['public_key'] = parts[0]
        vpn[peer_ip]['vpn']['endpoint'] = parts[2].partition(':')[0]
        vpn[peer_ip]['vpn']['last_seen'] = int(parts[4])
        vpn[peer_ip]['vpn']['rcvd'] = int(parts[5])
        vpn[peer_ip]['vpn']['sent'] = int(parts[6])
        vpn[peer_ip]['vpn']['keepalive'] = int(parts[7])
        vpn[peer_ip]['local'] = False
    
    i = i+1

for i in vpn.values():
    ret['nodes'].append(i)

default_password = hashlib.sha256(b'Nethesis,1234').hexdigest()
admin = rdb.acl_getuser('admin')
for p in admin['passwords']:
    if p == default_password:
        ret['default_password'] = True

json.dump(ret, fp=sys.stdout)
