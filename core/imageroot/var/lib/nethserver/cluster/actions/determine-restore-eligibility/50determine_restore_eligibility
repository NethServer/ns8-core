#!/usr/bin/env python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import agent
import sys
import os
import json
import tempfile
import cluster.modules

request = json.load(sys.stdin)
repository = request['repository']
path = request['path']
snapshot = request.get("snapshot", "latest")
# Write privileges are required for Redis repository metadata caching:
rdb = agent.redis_connect(privileged=True)
# Write the output to a named temporary file, to parse it with the
# existing read_envfile() function
with tempfile.NamedTemporaryFile() as fenv:
    agent.run_restic(rdb, repository, path, ["--workdir=/srv"], ["dump", snapshot, "state/environment"], text=True, encoding='utf-8', stdout=fenv, check=True)
    fenv.seek(0)
    original_environment = agent.read_envfile(fenv.name)
module_source, _ = original_environment['IMAGE_URL'].rsplit(':', 1)
# Reduce the list to one element, matching the original source:
available = list(filter(lambda omod: omod["source"] == module_source, cluster.modules.list_available(rdb, skip_core_modules = False)))
if not available:
    # The module is not available from enabled repositories and no
    # instance of it is installed in the cluster.
    # FIXME: In this condition we assume that every cluster node is
    # eligible for installation. This assumption will be valid for
    # "max-per-node" limit only. If we implement new reject reasons we
    # need to review this approach.
    print(agent.SD_WARNING + f"Can't determine restore eligibility for {module_source}. All nodes are allowed.", file=sys.stderr)
    destination_all_nodes = [{"node_id": int(xnode_id), "instances": 0, "eligible": True, "reject_reason": None} for xnode_id in set(rdb.hvals('cluster/module_node'))]
    available = [{"install_destinations": destination_all_nodes}]
else:
    cluster.modules.decorate_with_installed(rdb, available)
    cluster.modules.decorate_with_install_destinations(rdb, available)
json.dump({
    "image_url": original_environment['IMAGE_URL'],
    "install_destinations": available[0]["install_destinations"],
}, fp=sys.stdout)
