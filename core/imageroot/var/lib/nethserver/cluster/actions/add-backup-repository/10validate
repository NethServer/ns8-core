#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import os
import sys
import json
import agent
import uuid
import subprocess

errors = []

request = json.load(sys.stdin)
rdb = agent.redis_connect(privileged=False)

agent.set_weight(os.path.basename(__file__), 0) # Validation step, no task progress at all

rid = str(uuid.uuid5(uuid.NAMESPACE_URL, request['url']))

# check for duplicate names
if rdb.exists(f'cluster/backup_repository/{rid}'):
    errors.append({'field':'url','parameter':'url','value':request['url'],'error':'backup_repository_exists'})

# validate repository credentials
renv = dict(os.environ) # copy the environment
renv.update(request['parameters']) # merge parameters
renv['url'] = request['url'] # add url
pvalidate = subprocess.run(['rclone-wrapper', '0', 'size', '--json', 'REMOTE_PATH'], text=True, capture_output=True, env=renv)
if pvalidate.returncode != 0:
    if 'failed to authorize' in pvalidate.stderr:
        errors.append({'field':'parameters','parameter':'parameters','value':'','error':'backup_repository_auth_error'})
    else:
        errors.append({'field':'url','parameter':'url','value':request['url'], 'error':'backup_repository_not_accessible'})

if errors:
    agent.set_status('validation-failed')
    json.dump(errors, fp=sys.stdout)
    sys.exit(2)
