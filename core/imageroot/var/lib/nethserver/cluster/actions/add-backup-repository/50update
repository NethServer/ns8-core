#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import os
import sys
import json
import uuid
import agent
import hashlib
import agent.backup

request = json.load(sys.stdin)
rdb = agent.redis_connect(privileged=True)

name = request['name']
url = request['url']
id = str(uuid.uuid5(uuid.NAMESPACE_URL, url))

if 'password' in request:
    password = request['password']
else:
    # Generate random password for backup encryption
    m = hashlib.sha256()
    m.update(uuid.uuid4().bytes)
    password = m.hexdigest()

data = {'url': url, 'password': password, 'name': name}

# Setup extra parameters for repository access
for k in request['parameters']:
    data[k] = request['parameters'][k]

# Add the repository key
if not rdb.hset(f'cluster/backup_repository/{id}', mapping=data):
    sys.exit(1)

# Create repository path to store rclone configuration
repo_path = f'/etc/nethserver/backup/{id}'
os.makedirs(repo_path, exist_ok=True)

parts = request['url'].split(":")
# FIXME: support all other backends
if parts[0] == "b2":
    with open(f'{repo_path}/rclone.conf', 'w') as f:
        f.write(f'[{parts[1]}]\n')
        f.write(f'type = b2\n')
        f.write(f'account = {data["b2_account_id"]}\n')
        f.write(f'key = {data["b2_account_key"]}\n')
        f.write(f'hard_delete = true\n')

json.dump({'password': password, 'id': id}, fp=sys.stdout)
