#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import json
import sys
import agent

rdb = agent.redis_connect()

backups = {}

for kbackup in rdb.scan_iter('cluster/backup/*'):
    bid = kbackup.removeprefix('cluster/backup/')
    battrs = rdb.hgetall(kbackup)

    backups[bid] = {
        "id": int(bid),
        "name": battrs.pop("name"),
        "repository": battrs.pop("repository"),
        "schedule": battrs.pop("schedule"),
        "retention": battrs.pop("retention"),
        "instances": [],
        "enabled": bool(battrs.pop("enabled")),
    }

configured_instances = set()

for mbackup in rdb.scan_iter('module/*/backups'):
    for bid in rdb.sscan_iter(mbackup):
        if bid in backups:
            mid = mbackup.removeprefix('module/').removesuffix('/backups')
            module_uuid = rdb.hget(f"module/{mid}/environment", "MODULE_UUID")
            status = rdb.hgetall(f"module/{mid}/backup_status/{bid}")
            if status:
                for k in status.keys():
                    status[k] = int(status[k])
                status["success"] = status["errors"] == 0
                del(status["errors"])
            backups[bid]['instances'].append({
                "module_id": mid,
                "ui_name": rdb.get(f"module/{mid}/ui_name") or "",
                "repository_path": f"{mid}@{module_uuid}",
                "status": status,
            })
            configured_instances.add(mid)

unconfigured_instances = []

# XXX module blacklist -- this should be implemented elsewhere:
skip_modules = ["promtail", "samba", "openldap", "loki", "ldapproxy", "traefik"]

for xins in rdb.scan_iter('module/*/environment'):
    mid = xins.removesuffix('/environment').removeprefix('module/')
    if [mskip for mskip in skip_modules if mid.startswith(mskip)]:
        continue
    if not mid in configured_instances:
        unconfigured_instances.append({
            "id": mid,
            "ui_name": rdb.get(f"module/{mid}/ui_name") or "",
        })

json.dump({"backups": list(backups.values()), "unconfigured_instances": unconfigured_instances}, fp=sys.stdout)
