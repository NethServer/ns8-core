#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import os
import sys
import json
import agent
import uuid
import subprocess

errors = []

request = json.load(sys.stdin)
rdb = agent.redis_connect(privileged=False)

agent.set_weight(os.path.basename(__file__), 0) # Validation step, no task progress at all

repository = request['repository']

if not rdb.exists(f'cluster/backup_repository/{repository}'):
    errors.append({'field':'id','parameter':'id','value': repository,'error':'backup_repository_not_found'})

if subprocess.run(['/usr/bin/systemd-analyze', 'calendar', request['schedule']], stdout=subprocess.DEVNULL).returncode != 0:
    errors.append({'field':'schedule','parameter':'schedule','value': request['schedule'],'error':'bad_schedule_format'})

for mid in request['instances']:
    if not rdb.exists(f'module/{mid}/environment'):
        errors.append({'field':'instances','parameter':'instances','value': mid,'error':'module_not_found'})

if errors:
    agent.set_status('validation-failed')
    json.dump(errors, fp=sys.stdout)
    sys.exit(2)
