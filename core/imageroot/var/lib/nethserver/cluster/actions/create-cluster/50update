#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.rdb.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServerdb.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServerdb.  If not, see COPYING.
#

import sys
import ipaddress
import os
import json
import agent
import agent.tasks
import cluster.grants
import uuid

request = json.load(sys.stdin)

network = request['network']
endpoint = request['endpoint']
listen_port = int(request['listen_port'])

agent.assert_exp(network)
agent.assert_exp(endpoint)
agent.assert_exp(listen_port)

public_key = agent.slurp_file('/etc/nethserver/wg0.pub')
agent.assert_exp(public_key)

NODE_ID = 1
ip_address = str(ipaddress.ip_network(network).network_address + NODE_ID)

# Get a Redis connection
rdb = agent.redis_connect(privileged=True)

# Generate the UUID for the cluster
rdb.setnx('cluster/uuid', str(uuid.uuid4()))

#
# Set the cluster/network and VPN settings in Redis DB
#
rdb.set('cluster/network', network)
rdb.hset(f'node/{NODE_ID}/vpn', mapping={
    "public_key": public_key,
    "ip_address": ip_address,
    "destinations": "",
    "endpoint": endpoint,
    "listen_port": listen_port,
})

# Our first Traefik instance is missing the VPN network: fix it here.
rdb.set('module/traefik1/kv/http/middlewares/ApiServerMw1/ipWhiteList/sourceRange/1', network)

# Update the cluster-localnode record in /etc/hosts
agent.run_helper('sed', '-i',
    '-e', f'/cluster-localnode$/c\{ip_address} cluster-localnode',
    '/etc/hosts').check_returncode()

#
# Apply new VPN setup
#
agent.save_wgconf(ip_address, listen_port)
agent.run_helper(*'systemctl restart wg-quick@wg0'.split(' ')).check_returncode()

# (Samba) account provider might want to route some IP addresses through our VPN. Define a role for that:
cluster.grants.grant(rdb, action_clause="update-routes", to_clause="accountprovider", on_clause='cluster')

#
# Install core modules
#
add1_module_failures = agent.tasks.runp_brief([
        {"agent_id": "cluster", "action": "add-module", "data": {
            'image': 'ldapproxy',
            'node': NODE_ID,
        }},
        {"agent_id": "cluster", "action": "add-module", "data": {
            'image': 'loki',
            'node': NODE_ID,
        }},
    ],
    endpoint = "redis://cluster-leader",
    progress_callback = agent.get_progress_callback(25, 85),
)
agent.assert_exp(add1_module_failures == 0)

add2_module_failures = agent.tasks.runp_brief([
        # promtail must be installed AFTER loki
        {"agent_id": "cluster", "action": "add-module", "data": {
            'image': 'promtail',
            'node': NODE_ID,
        }},
    ],
    endpoint = "redis://cluster-leader",
    progress_callback = agent.get_progress_callback(86, 95),
)
agent.assert_exp(add2_module_failures == 0)

json.dump({
    "ip_address": ip_address,
}, fp=sys.stdout)
