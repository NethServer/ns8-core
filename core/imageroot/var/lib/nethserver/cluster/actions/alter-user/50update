#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import agent
import json

#
# Sample input
#{
#    "user": "admin",
#    "set": {
#       "display_name": "The Administrator"
#       "email": "admin@example.com"
#       "password": "my-new-password"
#    },
#    "revoke": [{"role":"owner",  "on":"*"}],
#    "grant":  [{"role":"reader", "on":"cluster"}],
#}
#

request = json.load(sys.stdin)
rdb = agent.redis_connect(privileged=True)

user = request['user']

# check user and reject action
if (user == 'cluster' or '/' in user):
    agent.set_status('validation-failed')
    json.dump([{'field':'user','parameter':'user','value':user,'error':'invalid_user'}], fp=sys.stdout)
    sys.exit(2)

# check set parameters
if 'set' in request:
    if 'display_name' in request['set']:
        # change display name
        rdb.hset(f'user/{user}', 'display_name', request['set']['display_name'])

    if 'email' in request['set']:
        # change email
        rdb.hset(f'user/{user}', 'email', request['set']['email'])

    if 'password' in request['set']:
        # change password
        password = request['set']['password']
        rdb.acl_setuser(user, passwords=[f'+{password}'], reset_passwords=True, enabled=True)

for roledef in request['revoke']: # !!! revoke BEFORE grant
    cluster.grants.alter_user(rdb, user, True, roledef['role'], roledef['on'])

for roledef in request['grant']:
    cluster.grants.alter_user(rdb, user, False, roledef['role'], roledef['on'])

agent.save_acls(rdb)
