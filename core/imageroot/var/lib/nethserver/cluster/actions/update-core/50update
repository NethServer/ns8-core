#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import json
import agent
import agent.tasks
import sys, os

request = json.load(sys.stdin)
core_url = request['core_url']
nodes_list = request['nodes']

rdb = agent.redis_connect(privileged=True)

# Nodes sanity check: send a "list-actions" ping task and wait the result.
# If any node fails abort the whole action.
ping_errors = agent.tasks.runp_brief([{"agent_id":f"node/{node_id}", "action": "list-actions"} for node_id in nodes_list],
    endpoint="redis://cluster-leader",
    progress_callback=agent.get_progress_callback(1, 30),
)
agent.assert_exp(ping_errors == 0)

# Start the core update on each node
update_tasks = []
for node_id in nodes_list:
    update_tasks.append({
        "agent_id": f'node/{node_id}',
        "action": "update-core",
        "data": {
            "core_url": core_url
        }
    })

update_errors = agent.tasks.runp_brief(update_tasks,
    endpoint = "redis://cluster-leader",
    progress_callback=agent.get_progress_callback(31, 95),
)

grant_tasks = []
for node_id in nodes_list:
    # Refresh owner/reader grants on the cluster and node agents of updated nodes
    grants = []
    for action in ['*', 'list-*', 'get-*', 'show-*', 'read-*']:
        role = 'owner' if action == '*' else 'reader'
        grants.append({"action": action, "to": role, "on": f'node/{node_id}'})

    grant_tasks.append({
        'agent_id': 'cluster',
        'action': 'grant-actions',
        'data': grants,
    })

agent.tasks.runp_nowait(
    grant_tasks,
    endpoint = "redis://cluster-leader"
)

agent.assert_exp(update_errors == 0)

json.dump({}, fp=sys.stdout)
