#!/usr/bin/env python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import agent
import agent.tasks
import sys, os
import cluster.modules

request = json.load(sys.stdin)
core_url = request.get('core_url', '')
nodes_list = request['nodes']
force_update = request.get("force", False)

if not os.getenv("AGENT_TASK_USER"):
    # If invoked from apply-updates command, switch to managed repo view:
    cluster.modules.select_repo_view('managed')

rdb = agent.redis_connect(privileged=True)
# if the image url is not given, search for the latest core image inside the repo
if not core_url:
    core_url = cluster.modules.get_latest_module('core', rdb)

# Start the core update on each node
update_core_tasks = []
for node_id in nodes_list:
    update_core_tasks.append({
        "agent_id": f'node/{node_id}',
        "action": "update-core",
        "data": {
            "core_url": core_url,
            "force": force_update,
        }
    })

update_core_errors = agent.tasks.runp_brief(update_core_tasks,
    endpoint = "redis://cluster-leader",
    progress_callback=agent.get_progress_callback(31, 95),
)

agent.assert_exp(update_core_errors == 0, 'update-core failed in some nodes')
