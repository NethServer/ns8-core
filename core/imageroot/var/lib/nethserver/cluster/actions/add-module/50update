#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import json
import agent
import subprocess
import os
import re

def allocate_tcp_ports_range(node_id, module_id, size):
    """Allocate in "node_id" a TCP port range of the given "size" for "module_id"
    """
    global rdb
    assert size > 0

    seq = rdb.incrby(f'node/{int(node_id)}/tcp_ports_sequence', size)
    assert int(seq) > 0
    rdb.hset(f'module/{module_id}/environment', 'TCP_PORT', f'{seq - 1}') # Always set the first port
    if size > 1: # Multiple ports: always set the ports range variable
        rdb.hset(f'module/{module_id}/environment', 'TCP_PORTS_RANGE', f'{seq - size}-{seq - 1}')
    if size <= 8: # Few ports: set also a comma-separated list of ports variable
        rdb.hset(f'module/{module_id}/environment', 'TCP_PORTS', ','.join(str(port) for port in range(seq-size, seq)))

request = json.load(sys.stdin)
image_id = request['image']
node_id = int(request['node'])
assert node_id > 0

# Retrieve the image attributes from Redis DB. Is it the image for a rootfull module?
rdb = agent.redis_connect(privileged=True)
image = rdb.hgetall(f'image/{image_id}')
image_url = image['url']
assert image_url

# Pull the image from the remote server, if not already available locally
agent.run_helper('podman-pull-missing', image_url, progress_range=(0,33)).check_returncode()

# Parse the image labels
with subprocess.Popen(['podman', 'image', 'inspect', image_url], stdout=subprocess.PIPE, stderr=sys.stderr) as proc:
    inspect = json.load(proc.stdout)
    inspect_labels = inspect[0]['Labels']
    inspect_image_id = inspect[0]['Id']
    inspect_image_digest = inspect[0]['Digest']
    inspect_image_repodigest = inspect[0]['RepoDigests'][0]

if 'org.nethserver/rootfull' in inspect_labels:
    is_rootfull = int(inspect_labels['org.nethserver/rootfull']) == 1
else:
    is_rootfull = False

if 'org.nethserver/tcp_ports_demand' in inspect_labels:
    tcp_ports_demand = int(inspect_labels['org.nethserver/tcp_ports_demand'])
else:
    tcp_ports_demand = 0

# Increment the module sequence for image_id (e.g. traefik => traefik1)
module_id = image_id + str(rdb.incr(f'cluster/module_sequence/{image_id}'))

rdb.hset(f'module/{module_id}', mapping={
    "image": image_id,
    "image_url_override": "",
    "redis_sha256": "",
})

# Allocate TCP ports
if tcp_ports_demand > 0:
    allocate_tcp_ports_range(node_id, module_id, tcp_ports_demand)

# Store the image metadata for agent self-inspection purposes
rdb.hset(f'module/{module_id}/environment', mapping={
    'IMAGE_ID': inspect_image_id,
    'IMAGE_URL': image_url,
    'IMAGE_DIGEST': inspect_image_digest,
    'IMAGE_REOPODIGEST': inspect_image_repodigest,
    'MODULE_ID': module_id,
})

# Extract the UI code to a new module home
os.mkdir(f'/var/lib/nethserver/cluster/ui/apps/{module_id}')
os.chdir(f'/var/lib/nethserver/cluster/ui/apps/{module_id}')
agent.run_helper('extract-ui', image_url).check_returncode()

# Wait for the module host to set up the module environment: it
# has to return us the module password hash
exit_code, output, error = agent.run_subtask(rdb,
    progress_range=(34,66),
    agent_prefix=f'node/{node_id}',
    action='add-module',
    input_obj={
        "image_url": image_url,
        "module_id": module_id,
        "is_rootfull": is_rootfull,
    })
assert exit_code == 0

outobj=json.loads(output)

rdb.hset(f'module/{module_id}', mapping={
    "redis_sha256": outobj['redis_sha256'],
})

# Create a new Redis user for module_id and set the password and permissions
assert rdb.execute_command('ACL', 'SETUSER',
                    f'module/{module_id}', 'ON',
                    '#' + outobj['redis_sha256'],
                    f'~module/{module_id}/*',
                    'resetchannels', '&progress/task/*',
                    '+@read', '+@write', '+@transaction', '+@connection', '+publish') == 'OK'

# Persist ACLs to disk
assert rdb.execute_command('ACL', 'SAVE') == 'OK'

# Push the creation task for the new module.
exit_code, output, error = agent.run_subtask(rdb,
    progress_range=(67,100),
    agent_prefix=f'module/{module_id}',
    action="create-module",
    )
assert exit_code == 0

print(json.dumps({
    "module_id": module_id,
    "image_name": image['name'],
    "image_url": image_url,
}), file=sys.stdout)
