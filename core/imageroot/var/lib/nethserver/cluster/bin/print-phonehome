#!/usr/bin/env python3

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: AGPL-3.0-or-later
#

'''
Helper script that retrieves info for the phonehome server.
'''

import os
import sys
import pwd
import json
import agent
from cluster import modules

def cluster_facts():
    try:
        result = agent.tasks.run(
            agent_id='cluster',
            action='get-facts',
            extra={
                'isNotificationHidden': True,
            },
            endpoint="redis://cluster-leader"
        )
    except:
        print(agent.SD_WARNING + f"cluster/get-facts failed", file=sys.stderr)
        return None

    if result['exit_code'] == 0:
        return result['output']
    else:
        print(agent.SD_WARNING + f"cluster/get-facts failed", file=sys.stderr)
        return None
 
def modules_facts():
    ret = []
    rdb = agent.redis_connect(use_replica=True)
    installed_modules = modules.list_installed(rdb, skip_core_modules = False)
    instance_list = list(mi for module_instances in installed_modules.values() for mi in module_instances)

    # Collect facts from modules:
    for module in instance_list:
        # Default info
        minfo = {"id": module.get('id'), "version": module.get("version"), "name": module.get("module"), "node": module.get("node"), "installation_date": None }
        try:
            home_dir = pwd.getpwnam(module.get('id')).pw_dir
            agent_dir = f"{home_dir}/.config/state"
        except Exception as ex:
            agent_dir = f"/var/lib/nethserver/{module.get('id')}/state"
        if os.path.exists(agent_dir):
            minfo["installation_date"] = int(os.path.getmtime(f"{agent_dir}/agent.env"))

        try:
            list_actions_result = agent.tasks.run(
                agent_id='module/' + module.get('id'),
                action='list-actions',
                extra={
                    'isNotificationHidden': True,
                },
                endpoint="redis://cluster-leader",
            )

            if not list_actions_result or list_actions_result['exit_code'] != 0:
                print(agent.SD_WARNING + f"module/{module.get('id')}/list-actions failed", file=sys.stderr)
                raise Exception("list-actions failed")
            
            if 'get-facts' in list_actions_result.get('output', []):

                get_facts_result = agent.tasks.run(
                    agent_id='module/' + module.get('id'),
                    action='get-facts',
                    extra={ 'isNotificationHidden': True },
                    endpoint="redis://cluster-leader",
                )

                if get_facts_result['exit_code'] != 0:
                    print(agent.SD_WARNING, f"get-facts failed for {module.get('id')}", file=sys.stderr)
                    raise Exception("get-facts failed")

                ofacts = get_facts_result['output']
                # merge info from get-facts
                minfo.update(ofacts)
        except Exception as ex:
            print(agent.SD_WARNING + "module_facts() exception:", ex, file=sys.stderr)

        ret.append(minfo)

    return ret

def node_facts():
    ret = {}
    rdb = agent.redis_connect(privileged=True)

    tasks = [{
        'agent_id': 'node/'+rdb.hget(key, 'NODE_ID'),
        'action': 'get-facts'
    } for key in rdb.scan_iter('node/*/environment')]

    try:
        results = agent.tasks.runp(
            tasks,
            extra={
                'isNotificationHidden': True,
            },
            endpoint="redis://cluster-leader"
        )

        for item in results:
            for key in item['output']:
                ret[key] = item['output'][key]
    except:
        print(agent.SD_WARNING + f"node/get-facts failed", file=sys.stderr)

    return ret


def main():
    # Init dictionary that returns the data
    rdb = agent.redis_connect(privileged=True)
    facts = {
        '$schema': 'https://schema.nethserver.org/facts/2022-12.json',
        'uuid': rdb.get('cluster/uuid'),
        'installation': 'nethserver',
        'facts': {
            'cluster': cluster_facts(),
            'nodes': node_facts(),
            'modules': modules_facts()
        }
    }
    print(json.dumps(facts))

if __name__ == "__main__":
    main()