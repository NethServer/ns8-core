#!/usr/bin/env python3

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import os
import sys
import time
import agent
import base64
import subprocess
from string import Template
from agent.ldapproxy import Ldapproxy
from agent.ldapclient import Ldapclient

def get_default_mail(user, domain, rdb):
    """
    Search for installed mail modules.
    If a mail module is found for the user domain, return the default mail address
    Postfix can send to <user>@<user_domain>
    """
    for key in agent.list_service_providers(rdb,'imap','tcp'):
        if domain == key.get('user_domain'):
            return f"{user}@{domain}"       
    return None

def read_template(template, rdb, domain=""):
    """
    Read the template from the filesystem or from the redis database
    The redis database has the priority.

    Return the mail subject and the template content
    """
    if domain and template == "custom":
        mail_subject = rdb.hget(f"cluster/password_warning/templates", f"{domain}_custom_mail_subject")
        mail_template_content = rdb.hget(f"cluster/password_warning/templates", f"{domain}_custom_template_content")
        if mail_subject and mail_template_content:
            return mail_subject, base64.b64decode(mail_template_content).decode('utf-8')
        else:
            print(f"Custom template for domain {domain} not found", file=sys.stderr)
            return None, None
    else:
        template_f = f"/etc/nethserver/password_warning/{template}.tmpl"
        mail_subject_f = f"/etc/nethserver/password_warning/{template}.sbj"
        template_content = None
        mail_subject = None
        if os.path.exists(template_f):
            with open(template_f) as f:
                template_content = f.read()
            with open(mail_subject_f) as f:
                mail_subject = f.read()
            return mail_subject, template_content
        else:
            print(f"Template {template} not found", file=sys.stderr)
            return None, None

def list_expiring_users(domain, days):
    """
    List users that are going to expire in the next days
    """
    ret = []
    current_timestamp = int(time.time())
    portal_url = f"https://{agent.get_hostname()}/users-admin/{domain}/"
    ldap = Ldapproxy().get_domain(domain)
    if not ldap:
        return ret
    rdb = agent.redis_connect(privileged=True)
    users = Ldapclient.factory(**ldap).list_users(extra_info=True)
    for user in users:
        if user.get('expired', False):
            continue # already expired, notification already sent some time ago
        if user.get('password_expiration', None) is None:
            continue # no password expiration set
        mail = user.get('mail')
        if mail == "":
            # no email set, try to get the default mail if a mail module is installed
            mail = get_default_mail(user['user'], domain, rdb)
        if not mail:
            continue # no email set
        if user.get('password_expiration', -1) < 0:
            # user password does not expire
            continue
        # send notification if current timestamp - password_expiration (timestamp) <= NOTIFICATION_DAYS
        if (user['password_expiration'] - current_timestamp) <= (days * 86400):
            days = (user['password_expiration'] - current_timestamp) // 86400
            ret.append({
                "user": user['user'],
                "days": days,
                "name": user.get('display_name', user['user']),
                "mail": mail,
                "portal_url": portal_url,
                "domain": domain
            })
    return ret

def main():
    """
    Read all password warning configurations and send notifications
    """
    rdb = agent.redis_connect(privileged=True)
    leader_id = rdb.hget("cluster/environment", "NODE_ID")
    node_id = os.environ["NODE_ID"]

    if leader_id != node_id:
        print("This node is not the leader, skipping password notification", file=sys.stderr)
        sys.exit(0)

    default_template, default_mail_subject = read_template("default_en", rdb)
    for key in rdb.scan_iter('cluster/password_warning/*'):
        notification = rdb.hget(key, 'notification')
        if rdb.hget(key, 'days') is None:
            days = 7
        else:
            days = int(rdb.hget(key, 'days'))
        mail_from = rdb.hget(key, 'mail_from')
        domain = key.split('/')[-1]
        if notification == '0':
            print(f"Notification for the domain {domain} is disabled", file=sys.stderr)
            continue
        template = rdb.hget(key, 'mail_template')
        if not template:
            # no template set, use default
            mail_tmpl = Template(default_template)
            mail_subject_tmpl = Template(default_mail_subject)
        else:
            mail_subject, tmpl = read_template(template, rdb, domain)
            if not tmpl:
                # custom template not found, fallback to default
                mail_tmpl = Template(default_template)
                mail_subject_tmpl = Template(default_mail_subject)
            else:
                mail_tmpl = Template(tmpl)
                mail_subject_tmpl = Template(mail_subject)

        for user in list_expiring_users(domain, days):
            mail = mail_tmpl.safe_substitute(user)
            subject = mail_subject_tmpl.safe_substitute(user)
            try:
                subprocess.run(["runagent", "ns8-sendmail", "-s", subject, "-f", mail_from, user['mail']], input=mail.encode('utf-8'), check=True)
                print(f"Password notification sent for user {user['user']} to {user['mail']}", file=sys.stderr)
            except:
                print(f"Error sending notification for user {user['user']} to {user['mail']}", file=sys.stderr)
                continue

main()
