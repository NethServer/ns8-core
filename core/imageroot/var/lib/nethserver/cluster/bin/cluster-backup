#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import os
import pwd
import sys
import json
import agent
import os.path
import tempfile
import subprocess
import agent.tasks
from glob import glob

#
# Dump cluster configuration in JSON format and print it to stdout
#

output_dir = f'{os.environ["AGENT_STATE_DIR"]}/backup'

rdb = agent.redis_connect(host='127.0.0.1')

VERSION = "2"

dump = { 'version': VERSION, 'modules': {}, 'vpn': {}, 'cluster': { 'subscription': {}, 'apply_updates': {}, 'repository': {}, 'backup': {}, 'backup_repository': {}, 'user_domain': { 'ldap': {} },'override': {'modules': {} } }, 'traefik': {} }

# cluster: subscription
dump['cluster']['subscription'] = rdb.hgetall('cluster/subscription') or {}

# cluster: apply_updates
dump['cluster']['apply_updates'] = rdb.hgetall('cluster/apply_updates') or {}

# cluster: software repositories
for r in rdb.scan_iter('cluster/repository/*'):
    k = r.removeprefix('cluster/repository/')
    dump['cluster']['repository'][k] = rdb.hgetall(r)

# cluster: backup repositories
for r in rdb.scan_iter('cluster/backup_repository/*'):
    k = r.removeprefix('cluster/backup_repository/')
    dump['cluster']['backup_repository'][k] = rdb.hgetall(r)

# cluster: backups
for r in rdb.scan_iter('cluster/backup/*'):
    k = r.removeprefix('cluster/backup/')
    dump['cluster']['backup'][k] = rdb.hgetall(r)

# cluster ldap user domains
for d in rdb.scan_iter('cluster/user_domain/ldap/*/conf'):
    k = d.removeprefix('cluster/user_domain/ldap/')
    k = k.removesuffix('/conf')
    dump['cluster']['user_domain']['ldap'][k] = { 'conf' : None, 'providers': None }
    dump['cluster']['user_domain']['ldap'][k]['conf'] = rdb.hgetall(d)
    dump['cluster']['user_domain']['ldap'][k]['providers'] = rdb.lrange(f'cluster/user_domain/ldap/{k}/providers', 0, -1)
    if rdb.exists(f'cluster/user_domain/ldap/{k}/ui_names'):
        dump['cluster']['user_domain']['ldap'][k]['ui_names'] = rdb.hgetall(f'cluster/user_domain/ldap/{k}/ui_names')

# cluster: vpn network, label, uuid
for k in ['network', 'ui_name', 'uuid']:
    dump['cluster'][k] = rdb.get(f'cluster/{k}') or ''

# cluster: favorite apps
dump['cluster']['favorites'] = sorted(rdb.smembers(f'cluster/favorites'))

# cluster: module URL override
dump['cluster']['override']['modules'] = rdb.hgetall('cluster/override/modules')

# modules: backup schedules
for m in rdb.scan_iter('module/*/backups'):
    k = m.removeprefix('module/').removesuffix('/backups')
    uuid = rdb.hget(f'module/{k}/environment', 'MODULE_UUID')
    dump['modules'][uuid] = {'backups': []}
    dump['modules'][uuid]['backups'] = sorted(rdb.smembers(m))

# traefik: custom route and uploaded certificates
leader_id = rdb.hget("cluster/environment", "NODE_ID")
for tk in rdb.scan_iter('module/traefik*/flags'):
    tk_instance = tk.removesuffix('/flags')
    dump_task_result = agent.tasks.run(tk_instance, "dump-custom-config",
        data={},
         endpoint="redis://cluster-leader",
    )

    if dump_task_result['exit_code'] == 0:
        # instance on leader has a special name used during restore
        if rdb.hget(f'{tk_instance}/environment', 'NODE_ID') == leader_id:
            tk_name = 'leader'
        else:
            tk_name = tk_instance.removeprefix('module/')
        dump['traefik'][tk_name] = dump_task_result['output']

# leader vpn endpoint, required to invoke the create-cluster
dump['vpn']['endpoint'] = rdb.hget(f'node/{leader_id}/vpn', 'endpoint')

# dump to JSON
os.makedirs(output_dir, exist_ok=True)

with open(f'{output_dir}/dump.json', 'w') as fp:
    # Sort the keys, for idempotency
    json.dump(dump, sort_keys=True, fp=fp)

# compress the JSON dump, without timestamp information for idempotency
subprocess.run(['gzip', '-n', '-f', f'{output_dir}/dump.json'], check = True)

# remove existing gpg file, otherwise gpg will fail
try:
   os.remove(f'{output_dir}/dump.json.gz.gpg')
except:
    pass

# encrypt, if the passhprase does not exists
if os.path.isfile(f'{output_dir}/passphrase'):
    subprocess.run(['gpg', '--batch', '-c', '--pinentry-mode', 'loopback', '--passphrase-file', f'{output_dir}/passphrase', f'{output_dir}/dump.json.gz'], check = True)
