#!/bin/bash

#
# Configure the machine as master or worker
#

set -e

function usage {
    echo "Usage: $0 <init|join|grant>"
    echo
    echo "  Initialize master node: $0 init [master_vpn_ip] [master_vpn_port]"
    echo
    echo "  Join worker node: $0 join <master_pubkey> <master_public_address:vpn_port> <worker_vpn_ip> [master_vpn_ip]"
    echo
    echo "  Accept worker node: $0 grant <worker_hostname> <worker_pubkey> <worker_vpn_ip>"
    exit 1
}

# Prepare variables
distro=$(awk -F = '/^ID=/ { print $2 }' /etc/os-release)
hostname=$(hostname -s)

INSTALL_DIR="/usr/local/share"
AGENT_DIR="${INSTALL_DIR}/agent"
REDIS_DIR="/var/lib/nethserver/redis"
VPN_DIR="/etc/wireguard"
VPN_CONF="$VPN_DIR/wg0.conf"
VPN_PRIV_KEY="$VPN_DIR/privatekey"

action=$1
shift

case "$action" in
    init)
        master_vpn_ip="${1-10.5.4.1}"
        master_vpn_port="${2-55820}"
    ;;
    join)
        master_pubkey=$1
        master_address=$2
        worker_vpn_ip=$3
        master_vpn_ip="${4-10.5.4.1}"
        if [[ -z "$master_pubkey" || -z "$master_address" || -z "$worker_vpn_ip" ]]; then
            usage
        fi
    ;;
    grant)
        worker_hostname=$1
        worker_pubkey=$2
        worker_vpn_ip=$3
        if [[ -z "$worker_hostname" || -z "$worker_pubkey" || -z "$worker_vpn_ip" ]]; then
            usage
        fi
    ;;
    *)
        usage
    ;;
esac

# Prepare all directories
mkdir -p $REDIS_DIR $VPN_DIR
chmod 700 $VPN_DIR

#
# Grant: add node to to the cluster
#

if [ "$action" == "grant" ]; then
    podman run -i --network host --rm docker.io/redis:6-alpine redis-cli <<EOF
HSET node/$worker_hostname/vpn PUBLIC_KEY $worker_pubkey IP_ADDRESS $worker_vpn_ip
PUBLISH $(hostname -s):grant-node $worker_hostname
EOF
    exit 0
fi

#
# WireGuard VPN setup
# Redis will bind also to the VPN IP
#

# Avoid private key regeneration
if [ ! -f $VPN_PRIV_KEY ]; then
    umask 0077
    wg genkey > $VPN_PRIV_KEY
    umask 0022
fi

# Generate configuration
if [ "$action" == "init" ]; then
    echo "Setup WireGuard VPN master node:"
    cat > $VPN_CONF << EOF
[Interface]
Address = $master_vpn_ip/24
PrivateKey = $(cat $VPN_PRIV_KEY)
ListenPort = $master_vpn_port
EOF
    systemctl enable --now wg-quick@wg0

elif [ "$action" == "join" ]; then
    net=$(echo $worker_vpn_ip | cut -d'.' -f1,2,3)".0"

    cat > $VPN_CONF << EOF
[Interface]
Address = $worker_vpn_ip/24
PrivateKey = $(cat $VPN_PRIV_KEY)

[Peer]
PublicKey = $master_pubkey
Endpoint = $master_address
AllowedIPs = $net/24
PersistentKeepalive = 30
EOF
    systemctl enable --now wg-quick@wg0
fi


#
# Redis setup
#

if [ "$action" == "init" ]; then
    echo "EXTRA_PARAMS=\"--bind 127.0.0.1 ::1 $master_vpn_ip --protected-mode no\"" > $REDIS_DIR/params.env
else
    echo "EXTRA_PARAMS=\"--bind 127.0.0.1 ::1 --replicaof $master_vpn_ip 6379\"" > $REDIS_DIR/params.env
fi

# Setup redis first, the agent will connect to it
echo "Setup redis:"
systemctl enable --now redis.service
echo -e "Waiting for redis: "
until [ "$(podman run -i --network host --rm docker.io/redis:6-alpine redis-cli PING 2>/dev/null)" == "PONG" ]; do
    sleep 1
done
echo "OK"

#
# Enable setup
#

echo "Enable agent:"
systemctl enable --now node-agent.service


#
# Master setup:
# - traefik
# - restic-server
# - wireguard server
#
if [ "$action" == "init" ]; then
    echo "Setup traefik:"
    podman run -i --network host --rm docker.io/redis:6-alpine redis-cli <<EOF
SET traefik ''
HSET module/traefik0/module.env LE_EMAIL root@$(hostname -f) EVENTS_IMAGE ghcr.io/nethserver/traefik:latest
PUBLISH $(hostname -s):module.init traefik0
EOF

    echo "Setup restic server:"
    podman run -i --network host --rm docker.io/redis:6-alpine redis-cli <<EOF
HSET module/restic0/module.env EVENTS_IMAGE ghcr.io/nethserver/restic-server:latest
PUBLISH $(hostname -s):module.init restic0
EOF

    # Save master VPN config inside redis for later reuse
    master_pubkey=$(cat $VPN_PRIV_KEY | wg pubkey)
    podman run -i --network host --rm docker.io/redis:6-alpine redis-cli <<EOF
HSET node/$hostname/vpn PUBLIC_KEY $master_pubkey IP_ADDRESS $master_vpn_ip LISTEN_PORT $master_vpn_port
EOF
fi
