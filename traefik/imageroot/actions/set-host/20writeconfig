#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

#
# Create a virtual host configuration
# Input example:
#  {"instance": "module1", "url": "http://127.0.0.0:2000", "host": "module.example.org", "lets_encrypt": true, "http2https": true} 
#

import json
import sys
import os
import agent

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

agent_id = os.getenv("AGENT_ID", "")
if not agent_id:
    raise Exception("AGENT_ID not found inside the environemnt")

# Connect to redis
r = agent.redis_connect(privileged=True)

# Prepare common key prefix
prefix=f'{agent_id}/kv/http'
router=f'{prefix}/routers/{data["instance"]}-http'
router_s=f'{prefix}/routers/{data["instance"]}-https'

# Setup HTTP ans HTTPS routers
r.set(f'{prefix}/services/{data["instance"]}/loadBalancer/servers/0/url', data["url"])
r.set(f'{router}/service', data["instance"])
r.set(f'{router}/entrypoints', "http,https")
r.set(f'{router}/rule', f'Host(`{data["host"]}`)')
r.set(f'{router_s}/entrypoints', "http,https")
r.set(f'{router_s}/rule', f'Host(`{data["host"]}`)')
r.set(f'{router_s}/tls', "true")
r.set(f'{router_s}/service', data["instance"])
r.set(f'{router_s}/tls/domains/0/main', data["host"])

# Enable or disable Let's Encrypt certificate
if data["lets_encrypt"]:
    r.set(f'{router_s}/tls/certresolver', "letsencrypt")
else:
    r.delete(f'{router_s}/tls/certresolver')

# Enable or disable HTTP 2 HTTPS redirection
if data["http2https"]:
    r.set(f'{router}/middlewares/0', "http2https-redirectscheme")
else:
    r.delete(f'{router}/middlewares/0')
