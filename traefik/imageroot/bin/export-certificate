#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

#
# The script parses a traefik acme.json file and search for
# Let's Encrypt certificate.
# If a certificate has been created or updated,
# certificate and private keys are saved inside Redis in key
# named module/<module_id>/certificate/<domain> and
# the certificate-update event is signaled.
#

import os
import json
import agent
import os.path
import sys

module_id = os.environ['MODULE_ID']
node_id = os.environ['NODE_ID']
path = sys.argv[1]

try:
    data = json.load(open(path))
    certificates = data["letsencrypt"].get("Certificates", [])
except Exception as ex:
    print(agent.SD_WARNING + f"Let's Encrypt TLS certificates for Traefik were not found in {path}: {ex}", file=sys.stderr)
    sys.exit(0)

rdb = agent.redis_connect(privileged=True)

for info in certificates:
    rkey = f'module/{module_id}/certificate/{info["domain"]["main"]}'
    cur_cert = rdb.hget(rkey, 'cert')
    cur_key = rdb.hget(rkey, 'key')
    # save the certificate only if not exists or if has been changed
    if (not cur_cert or cur_cert != info["certificate"]) or (not cur_key or cur_key != info["key"]):
        print(f'Saving certificate and key to {rkey}')
        rdb.hset(rkey, mapping={"cert": info["certificate"], "key":  info["key"]})

        # signal the certificate-update event
        event_key = f'module/{module_id}/event/certificate-update'
        print(f'Publishing event {event_key}')
        event = {"certificate": info["certificate"], "key": info["key"], "node": node_id, "module": module_id, "domain": info["domain"]}
        rdb.publish(event_key, json.dumps(event))
