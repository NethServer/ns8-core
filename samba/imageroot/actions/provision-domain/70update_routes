#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import agent
import agent.tasks
import os
import sys
import json

#
# Check if routes for this new DC must be added automatically
#

realm = os.environ['REALM']
node_id = int(os.environ['NODE_ID'])
ip_address = os.environ['IPADDRESS']

dcs = set()
destinations = set()

rdb = agent.redis_connect()
for kenv in rdb.scan_iter(match='module/samba*/environment'):
    penv = rdb.hgetall(kenv)
    if penv.get('REALM') != realm:
        continue # skip DCs of other realms

    # Collect DC IP addresses, excluding the new DC
    if penv['IPADDRESS'] != ip_address:
        dcs |= { penv['IPADDRESS'] + '/32' }

for kvpn in rdb.scan_iter(match='node/*/vpn'):
    cvpn = rdb.hgetall(kvpn)

    # Collect IP addresses routed through the cluster VPN
    destinations |= {*cvpn.get('destinations', '').split()}

# Check if dcs is a non-empty subset of destinations AND
# Check if the new DC address is not already in destinations
if len(dcs) > 0 and dcs <= destinations and not (ip_address + '/32') in destinations:
    # Cluster VPN routes are added only if all other DCs
    # already do so.
    update_routes_result = agent.tasks.run(
        agent_id='cluster',
        action='update-routes',
        data={
            'add': [{
                "network": ip_address + '/32',
                "node_id": node_id,
            }],
        },
    )
    agent.assert_exp(update_routes_result['exit_code'] == 0)
    print(f"DCs traffic is routed through the cluster VPN. Other DCs can now can reach {ip_address}", file=sys.stderr)
